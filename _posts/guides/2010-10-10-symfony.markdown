---
layout: post
title:  "Symfony2"
permalink:  "symfony"
date:   2015-09-18 16:30:15
category: Quick Guides
tags: Web
---
# Installation

> Installation tested on Ubuntu 14.04 (Symfony 2.7)

Download installer
: {% highlight bash %}
# instead of curl, you can download from browser and move to /usr/local/bin/symfony
$ sudo curl -LsS http://symfony.com/installer -o /usr/local/bin/symfony
$ sudo chmod a+x /usr/local/bin/symfony
{% endhighlight %}

Create new project
: {% highlight bash %}
$ cd ~/workspace
$ symfony new my_project_name
# create symlink to web server
$ sudo ln -s ~/workspace/my_project_name/web /var/www/my_project_name
{% endhighlight %}

Meet Symfony Requirements (if needed)
: {% highlight bash %}
# put these lines on /etc/php5/cli/php.ini and /etc/php5/apache2/php.ini
date.timezone = Europe/Madrid
xdebug.max_nesting_level=250
# recheck requirements
$ php my_project_name/app/check.php
{% endhighlight %}

Set permissions (set acls cli + web server)
: {% highlight bash %}
$ sudo setfacl -R -m u:"www-data":rwX -m u:`whoami`:rwX app/cache app/logs
$ sudo setfacl -dR -m u:"www-data":rwX -m u:`whoami`:rwX app/cache app/logs
{% endhighlight %}

Configure app from Web
: Go to [http://localhost/my_project_name/config.php](http://localhost/my_project_name/config.php)

> You will need to `chmod o+w app/config/parameters.yml` and restore permissions with `o-w` once the web config is done

> You can also edit the yaml config file: `app/config/parameters.yml` directly 

Access app from php server (with debug info)
: {% highlight bash %}
# Run server
$ cd ~/workspace/my_project_name
$ php app/console server:run
# Now you can access app on localhost:8000
{% endhighlight %}

Install Composer
: {% highlight bash %}
$ curl -sS https://getcomposer.org/installer | php
$ sudo mv composer.phar /usr/local/bin/composer
{% endhighlight %}

Updating project (vendor directory)
: {% highlight bash %}
$ cd ~/workspace/my_project_name
$ composer update
# to check vulnerabilities
$ php app/console security:check
{% endhighlight %}

Removing Acme bundle (demo bundle that comes with Symfony Standard Edition)
: Read [this](https://symfony.com/doc/current/cookbook/bundles/remove.html)

Download Symfony Demo
: {% highlight bash %}
$ sudo apt-get install php5-sqlite
$ symfony demo
{% endhighlight %}


> Documentation
: 
* [symfony 2.7 installation doc](http://symfony.com/doc/2.7/book/installation.html)

---


# Quick Guide

## Directory tree

Important dirs
: 
* Application resources: `app/Resources`
* Bundle PHP code: `src/path/to/bundle`
* Third party libraries: `vendor/`
* Public files: `web/`
* Bundle resources: `src/path/to/bundle/Resources` 

> Bundle resources are overridden by App resources seen above (except translations and validation metadata!)

> Routing and config Bundle resources files can be imported from App resources, and will be overridden (or not) depending on the order they are load

Important files
: 
* Routing file: `app/config/routing.yml`
* Services file: `app/config/services.yml`
* Infrastructure config file: `app/config/parameters.yml`
* Application config files: `app/config/config.yml`, `app/config/config_prod.yml`, `app/config/config_dev.yml`
* Development front controller: `web/app_dev.php`
* Production front controller: `web/app.php`
* Enable new bundles: `app/AppKernel.php`

> For config options: `$ app/console config:dump-reference <something>` or see [config reference](https://symfony.com/doc/current/reference/index.html)

> Documentation
: 
* [Directory tree](https://symfony.com/doc/current/book/page_creation.html#exploring-the-project)

---


## Bundles and overriding

### Bundles and "app" overriding
* [How to create a bundle and dir structure](http://symfony.com/doc/current/book/bundles.html)
* [Template overriding](http://symfony.com/doc/current/book/templating.html#overriding-bundle-templates)

### Bundle inheritance
* [Bundle inheritance](http://symfony.com/doc/current/cookbook/bundles/inheritance.html)
* [How to override bundles](http://symfony.com/doc/current/cookbook/bundles/override.html)
* [Translation overriding](http://symfony.com/doc/current/cookbook/bundles/override.html#translations)

### Advanced
* [Prepending config to a bundle](http://symfony.com/doc/current/cookbook/bundles/prepend_extension.html)
* [Service config per bundle](http://symfony.com/doc/current/cookbook/bundles/extension.html)
* [Advanced config per bundle](http://symfony.com/doc/current/cookbook/bundles/configuration.html)



---


## Routing

### Routing generation

Routing file syntax (`app/config/routing.yml`)
: {% highlight yaml %}
{% raw %}
# imports the routing from a routing.yml file from some bundle
acme:
        resource: "@AcmeBundle/Resources/config/routing.yml"
        prefix:   /
# imports routing from the anotations of another bundle
app:
        resource: "@AppBundle/Controller/"
        type:     annotation
blog:
        path:      /blog/{page}
        defaults:  { _controller: AppBundle:Blog:index, page: 1 }
        requirements:
            page:  \d+
blog_show:
        path:      /blog/{slug}
        defaults:  { _controller: AppBundle:Blog:show }
contact:
        path:     /{_locale}/contact
        defaults: { _controller: AppBundle:Main:contact }
        requirements:
            _locale: "%app.locales%"
{% endraw %}
{% endhighlight %}
        
> routes are evaluated in the order they are present in the file (for example this is relevant for `blog` and `blog_show` routes seen above)
    
Controller arguments available (to use as constructor arguments)
: 
* $_locale
* $_format
* $_controller
* $_route
* Any value set in defaults or routing path

Prefixing paths
: {% highlight yaml %}
{% raw %}
# app/config/routing.yml
app:
        resource: "@AppBundle/Controller/"
        type:     annotation
        prefix:   /site
{% endraw %}
{% endhighlight %}

### Routing from controllers

Redirecting to route
: {% highlight php startinline %}
{% raw %}
        if ($redirect) {
            return $this->redirectToRoute('homepage', array('page' => 1));
        } else {
            // forwarding to another controller (no routing id is needed)
            return $this->forward('AppBundle:Something:fancy', array(
                'name'  => $name,
                'color' => 'green',
            ));
        }
{% endraw %}
{% endhighlight %}

Redirecting to route using redirect() and generateUrl() methods together
: {% highlight php startinline %}
{% raw %}
        return $this->redirect($this->generateUrl('homepage', array('page' => 1)), 301);
        // you can also provide an external url:
        return $this->redirect('http://symfony.com/doc');
{% endraw %}
{% endhighlight %}

Generating an absolute url
: {% highlight php startinline %}
{% raw %}
    use Symfony\Component\Routing\Generator\UrlGeneratorInterface;
    // second parameter is optional
    $this->generateUrl('blog_show', array('slug' => 'my-blog-post'), UrlGeneratorInterface::ABSOLUTE_URL);
{% endraw %}
{% endhighlight %}

### Routing from templates

Controller url reference
: {% highlight jinja %}
{% raw %}
 <a href="{{ path('_welcome') }}">Home</a>       
{% endraw %}
{% endhighlight %}

Generate url with dynamic parameter
: {% highlight jinja %}
{% raw %}
{% for article in articles %}
    <a href="{{ path('article_show', {'slug': article.slug}) }}">
        {{ article.title }}
    </a>
{% endfor %}
{% endraw %}
{% endhighlight %}

Absolute url generation
: {% highlight jinja %}
{% raw %}
<a href="{{ url('_welcome') }}">Home</a>
{% endraw %}
{% endhighlight %}

### Routing from javascript

Relative url generation
: {% highlight javascript %}
Routing.generate('my_route_to_expose_with_defaults', { id: 2, foo: "bar" });
{% endhighlight %}

Absolute url generation
: {% highlight javascript %}
Routing.generate('route_id', /* your params */, true)
{% endhighlight %}

> You will need to install [this bundle](https://github.com/FriendsOfSymfony/FOSJsRoutingBundle/blob/master/Resources/doc/index.md)


> Documentation
: 
* [symfony 2.7 routing doc](http://symfony.com/doc/current/book/routing.html)


---


## Controllers

Request object
: {% highlight php startinline %}
{% raw %}
use Symfony\Component\HttpFoundation\Request;
/**
 * @Route("/hello/{firstName}/{lastName}", name="hello")
 */
public function indexAction(Request $request, $firstName, $lastName = 'default')
{
        $request->isXmlHttpRequest(); // is it an Ajax request?
        $request->getPreferredLanguage(array('en', 'fr'));
        $request->query->get('page'); // get a $_GET parameter
        $request->request->get('page'); // get a $_POST parameter
        // ...
}
{% endraw %}
{% endhighlight %}


Response object
: {% highlight php startinline %}
{% raw %}
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpFoundation\JsonResponse;
class LuckyController
{
/**
* @Route("/api/lucky/number")
*/
public function indexAction()
{
        // ...

        // calls json_encode and sets the Content-Type header
        return new JsonResponse($data);

        // above is the same as:
        return new Response(
            json_encode($data),
            Response::HTTP_OK,
            array('Content-Type' => 'application/json')
        );
        // and:
        $response = new Response(json_encode($data));
        $response->headers->set('Content-Type', 'application/json');
}
{% endraw %}
{% endhighlight %}

Sessions
: {% highlight php startinline %}
{% raw %}
use Symfony\Component\HttpFoundation\Request;
public function indexAction(Request $request)
{
        $session = $request->getSession();

        // store an attribute for reuse during a later user request
        $session->set('foo', 'bar');
        
        // unset session var
        $session->remove('foo');

        // get the attribute set by another controller in another request
        $foobar = $session->get('foobar');

        // use a default value if the attribute doesn't exist
        $filters = $session->get('filters', array());
}
{% endraw %}
{% endhighlight %}


Flash messages
: {% highlight php startinline %}
{% raw %}
this->addFlash(
    'notice',
    'Your changes were saved!'
);
// $this->addFlash is equivalent to:
/* $this->get('session')->getFlashBag()->add */
return $this->redirectToRoute(...);
{% endraw %}
{% endhighlight %}

Exceptions
: {% highlight php startinline %}
{% raw %}
    // 404 response code (page not found)
    throw $this->createNotFoundException('The product does not exist');
    
    // 403 response code (access denied)
    use Symfony\Component\HttpKernel\Exception\AccessDeniedHttpException;
    throw new AccessDeniedHttpException();
    
    // 500 response code (server error)
    throw new \Exception('Something went wrong!');
{% endraw %}
{% endhighlight %}
    
Services
: {% highlight php startinline %}
{% raw %}
// src/AppBundle/Controller/HelloController.php
namespace AppBundle\Controller;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;
class HelloController extends Controller
{
        // container services
        $router = $this->get('router');
        $mailer = $this->get('mailer');

        $html = $this->container->get('templating')->render(
            'lucky/number.html.twig',
            array('luckyNumberList' => $numbersList)
        );
            
        // shortcut for template rendering
        return $this->render(
        'lucky/number.html.twig',
        array('luckyNumberList' => $numbersList)
        );
}
{% endraw %}
{% endhighlight %}

> Services are called from a container instance that is available from all controllers => classes that extend from Controller class

> The base Controller class provides helper methods and access to services through the container. See helper methods [here](https://github.com/symfony/symfony/blob/master/src/Symfony/Bundle/FrameworkBundle/Controller/Controller.php)

> `$this->get()` is just a shortcut to `$this->container->get()`

> to list all available services: `$ app/console debug:container` 
    
    
> Documentation
: 
* [symfony 2.7 controllers doc](http://symfony.com/doc/2.7/book/controller.html)


---


## Templates

### Three-level Inheritance (best practice)
Base template
: `base.html.twig`

Section specific
: `section/layout.html.twig`: extends from base.html.twig

Page specific
: `section/index.html.twig`: extends from layout.html.twig

### Referencing templates

Application views (`app/Resources/views`)
:   
    * `base.html.twig`
    * `layout.html.twig` (default global layout)
    * `section/layout.html.twig` (specific section layout)
    * `section/index.html.twig` (specific page)

Bundle views (`path/to/bundle/Resources/views/`)
:   
    * `AcmeBundle:section:index.html.twig`
    * `AcmeBundle::layout.html.twig`

Examples
: {% highlight jinja %}
{% raw %}
{% extends 'base.html.twig' %}
{% extends 'blog/layout.html.twig' %}
{{ include('section/index.html.twig') }}
{{ include(AcmeBundle:section:index.html.twig') }}
{% endraw %}
{% endhighlight %}

### Embedding controllers

Embedded controller
: {% highlight jinja %}
{% raw %}
<div id="sidebar">
    {{ render(controller(
        'AppBundle:Article:recentArticles',
        { 'max': 3 }
    )) }}
</div>
{% endraw %}
{% endhighlight %}


Asynchronous embedded controller
: {% highlight jinja %}
{% raw %}
{{ render_hinclude(controller('...'),  {
    'default': 'default/content.html.twig'
}) }}
{{ render_hinclude(controller('...'), {'default': 'Loading...'}) }}
{% endraw %}
{% endhighlight %}

Default globals
: {% highlight yaml %}
{% raw %}
# app/config/config.yml
framework:
    # ...
    templating:
        hinclude_default_template: hinclude.html.twig
{% endraw %}
{% endhighlight %}
        
        
Assets
: {% highlight jinja %}
{% raw %}
{% block stylesheets %}
    <link href="{{ asset('css/main.css') }}" rel="stylesheet" />
    <link href="{{ asset('bundles/acmedemo/css/contact.css') }}" rel="stylesheet" />
{% endblock %}
{% block javascripts %}
    <script src="{{ asset('js/main.js') }}"></script>
{% endblock %}
{% endraw %}
{% endhighlight %}

> Install assets with with: `app/console assets:install --symlink --relative`

Request from templates
: {% highlight jinja %}
{% raw %}
{# get #}
{{ app.request.query.get('page') }}
{# post #}
{{ app.request.request.get('page') }}
{% endraw %}
{% endhighlight %}

Flash messages
: {% highlight jinja %}
{% raw %}
{% for flashMessage in app.session.flashbag.get('notice') %}
    <div class="flash-notice">
        {{ flashMessage }}
    </div>
{% endfor %}
{% endraw %}
{% endhighlight %}

### Global variables

app.security
: The security context.

app.user
: The current user object.

app.request
: The request object.

app.session
: The session object.

app.environment
: The current environment (dev, prod, etc).

app.debug
: True if in debug mode. False otherwise. 

> Global variables can be added from config file (see [App parameters](/symfony/#controllertwig-parameters))

> Documentation
: 
* [symfony 2.7 templating doc](http://symfony.com/doc/2.7/book/templating.html)
* For twig specific reference see [this](/twig/) or [the twig doc](http://twig.sensiolabs.org/documentation#reference)
* For symfony specific extensions see [this](http://symfony.com/doc/current/reference/twig_reference.html)
* To add your own twig extensions see [this](http://symfony.com/doc/current/cookbook/templating/twig_extension.html)


---


## Translations

### Translation data

Translation file `app/Resources/translations/messages.en.yml`
: {% highlight yaml %}
{% raw %}
symfony:
        great: Symfony is great
        amazing: Symfony is amazing
user:
        login: Login
{% endraw %}
{% endhighlight %}

> If the message is located in the catalog, the translation is returned. If not, the translator returns the original message.

> It is possible to define multiple domains/files (default domain is `messages`, read [more](http://symfony.com/doc/current/components/translation/introduction.html#using-message-domains))

> After adding a new translation file, cleaning cache is required: `php app/console cache:clear`

Transchoice string (pluralization)
: 
```
'{0} There are no apples|[20,Inf[ There are too much apples|singular: There is one apple|plural: There are %count% apples'
```

> Each locale has its own rules. For example, the above transchoice string would be useful for languages as spanish or english, but not others.

> Tags like `singular:` or `plural:` are only hints for the developer/translator

### Using translation functions from the controller

Trans and transchoice functions
: {% highlight php startinline %}
{% raw %}
$translator = $this->get('translator');
// the optional param 'admin' is the domain of the translation
$translator->trans('Symfony is great', array(), 'admin');
$translator->transChoice(
        '{0} There are no apples|[20,Inf[ There are too much apples|singular: There is one apple|plural: There are %count% apples',
        10,
        array('%count%' => 10),
        );
{% endraw %}
{% endhighlight %}

### Using translation functions from templates

Trans and transchoice functions
: {% highlight jinja %}
{% raw %}
{% trans %}Hello %name%{% endtrans %}
{% transchoice count %}
    {0} There are no apples|[20,Inf[ There are too much apples|singular: There is one apple|plural: There are %count% apples
{% endtranschoice %}
{% endraw %}
{% endhighlight %}

Trans and transchoice with additional params
: {% highlight jinja %}
{% raw %}
{% trans with {'%name%': 'Fabien'} from "app" into "fr" %}Hello %name%{% endtrans %}
{% transchoice count with {'%name%': 'Fabien'} from "app" %}
    {0} %name%, there are no apples|{1} %name%, there is one apple|]1,Inf[ %name%, there are %count% apples
{% endtranschoice %}
{% endraw %}
{% endhighlight %}

Trans and transchoice as filters
: {% highlight jinja %}
{% raw %}
{{ message|trans({'%name%': 'Fabien'}, "app") }}
{{ message|transchoice(5, {'%name%': 'Fabien'}, 'app') }}
{% endraw %}
{% endhighlight %}

Define default domain (instead of "messages") for all translations on template
: {% highlight jinja %}
{% raw %}
    {% trans_default_domain "domain" %}
{% endraw %}
{% endhighlight %}

> Documentation
: 
* [Configuration](http://symfony.com/doc/current/book/translation.html#configuration)
* [Debugging translations](http://symfony.com/doc/current/book/translation.html#debugging-translations)



---


## Forms and validation

### Validation
* [The validator service](http://symfony.com/doc/current/book/validation.html)

### Forms
* [Forms doc](http://symfony.com/doc/current/book/forms.html)
* [Best practices](http://symfony.com/doc/current/best_practices)
* [Form cookbook](http://symfony.com/doc/current/cookbook/form)
* [Form validation](http://symfony.com/doc/current/book/forms.html#form-validation)
* [Create a separate Form class](http://symfony.com/doc/current/book/forms.html#creating-form-classes)
* [Forms with ajax (not tested)](http://codemonkeys.be/2013/01/ajaxify-your-symfony2-forms-with-jquery/)

#### Form data

* [Form data object](http://symfony.com/doc/current/book/forms.html#creating-a-simple-form)
* [Embedded Form data objects](http://symfony.com/doc/current/book/forms.html#embedded-forms)
* [Form without Form data object](http://symfony.com/doc/current/book/forms.html#using-a-form-without-a-class)

#### Form rendering
* [Render Form manually](http://symfony.com/doc/current/book/forms.html#rendering-a-form-in-a-template)
* [Form theming](http://symfony.com/doc/current/book/forms.html#form-theming)



---


## Session management

Initializing the session
: {% highlight php startinline %}
{% raw %}
$session = new Session();
$myAttributeBag = new AttributeBag($appName);
// $myAttributeBag->setName('some_descriptive_name');
$session->registerBag($myAttributeBag);
$session->start();
{% endraw %}
{% endhighlight %}

> Documentation
: 
* [Session management reference](http://symfony.com/doc/current/components/http_foundation/sessions.html)
* [Sessions example code](http://gnugat.github.io/2014/04/23/sf2-sessions-introduction.html)


---


## Configuration

### Configuration files

Infrastructure related
: Files: `app/config/parameters.yml`

> This file is unique per server (infrastructure), this file should be only on prod environment, not on version control.

Canonical parameters
: Files: `app/config/parameters.yml.dist`

> This file defines the parameters needed on previous file, should be on version control.

Application-Related
: Files: `app/config/config_dev.yml`, `app/config/config_prod.yml`, `app/config/config.yml`

> Symfony configuration. `config_dev.yml` and `config_prod.yml` files can override `config.yml` settings.

### Controller/twig parameters

Config file
: {% highlight yaml %}
{% raw %}
parameters:
        app.version: 00.00.01
# make app.version value accesible for twig templates
twig:
        globals:
            version: %app.version%
{% endraw %}
{% endhighlight %}

> This parameters could be on any config file or in a separate file (for example: app_parameters.yml) imported from `config_dev.yml`, `config_prod.yml`, `config.yml`, using `import` parameter from top of the file

App parameter from controller
: {% highlight php startinline %}
{% raw %}
    $container->getParameter('app.version');
    $container->setParameter('app.version', '00.00.02');
{% endraw %}
{% endhighlight %}

App parameter from twig
: {% highlight jinja %}
{% raw %}
    {{ version }}
{% endraw %}
{% endhighlight %}

> Documentation
: 
* [Best practices](http://symfony.com/doc/current/best_practices/configuration.html)
* [Parameters](http://symfony.com/doc/current/components/dependency_injection/parameters.html)
* [External parameters](http://symfony.com/doc/current/cookbook/configuration/external_parameters.html)


---


## Services

Service class
: {% highlight php startinline %}
{% raw %}
namespace AppBundle\Lib;
use Symfony\Bundle\FrameworkBundle\Templating\EngineInterface;
use Symfony\Component\HttpFoundation\Response;
class MyService
{
        private $templating;

        public function __construct(EngineInterface $templating, $appName)
        {
            $this->templating = $templating;
        }
}
{% endraw %}
{% endhighlight %}

Configuration
: {% highlight yaml %}
{% raw %}
# app/config/services.yml
services:
        my_service:
            class:     AppBundle\Lib\MyService
            arguments: ["@templating", "%appName%"]
{% endraw %}
{% endhighlight %}
        
Instantiation
: {% highlight php startinline %}
{% raw %}
$myService = $container->get('my_service');
{% endraw %}
{% endhighlight %}

> Documentation
: 
* [symfony 2.7 services doc](http://symfony.com/doc/2.7/book/controller.html)
* [Controller as a service](http://symfony.com/doc/current/cookbook/controller/service.html)



---


## Console commands

List commands
: {% highlight bash %}
    $ app/console --list
{% endhighlight %}

Show help for some command
: {% highlight bash %}
    $ app/console --help <some_command>
{% endhighlight %}

Create a new bundle
: {% highlight bash %}
    $ app/console generate:bundle --namespace=Vendor/Bundle
{% endhighlight %}

Install assets
: {% highlight bash %}
    $ php app/console assets:install --symlink --relative
{% endhighlight %}

Clear cache
: {% highlight bash %}
    $ app/console cache:clear --env=prod
    $ app/console cache:clear --env=dev
{% endhighlight %}

Show config
: {% highlight bash %}
    # show bundles
    $ app/console config:dump-reference
    # show current extension config
    $ app/console config:dump-reference <bundle_alias>
{% endhighlight %}

Show services
: {% highlight bash %}
    # list all services
    $ app/console debug:container
    # show info for a service
    $ app/console debug:container <service_name>
{% endhighlight %}



---


## Third party bundles

> Useful symfony bundles
: 
* [Routing functions from javascript](https://github.com/FriendsOfSymfony/FOSJsRoutingBundle)
* [Translation functions from javascript](https://github.com/willdurand/BazingaJsTranslationBundle)
* [Pagination from array, ORM query, etc](https://github.com/KnpLabs/KnpPaginatorBundle)
* [Symfony Bootsrap integration](https://github.com/phiamo/MopaBootstrapBundle) (see [this](/bootstrap/#how-to-install-bootstrap-sass-compass) if you only want bootstrap-sass)
* [REST API](http://symfony.com/doc/current/bundles/FOSRestBundle) / FOSRestBundle [controller example](https://github.com/liip/LiipHelloBundle/blob/master/Controller/RestController.php) / RESTful [concept](http://stackoverflow.com/questions/671118/what-exactly-is-restful-programming)

> Complete list of Symfony Bundles [here](http://knpbundles.com/)

Uninstall bundle installed with composer
: {% highlight bash %}
    $ composer remove <vendor>/<bundle> --update-with-dependencies
{% endhighlight %}
