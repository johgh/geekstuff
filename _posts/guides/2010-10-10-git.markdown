---
layout: post
title:  "Git quick guide"
permalink:  "git"
date:   2015-07-02 16:30:15
category: Quick Guides
tags: Git
---
# Terminología

`Working Tree`
: Ficheros que tenemos en el workspace

`Index`
: También conocido como "staging". Es el snapshot que será traspasado a nuestro repositorio local al ejecutar `git commit`. Cada vez que ejecutamos `git add` los ficheros se añaden tal cual están en ese momento, si luego se hacen más cambios sobre los mismos ficheros se deberá volver a ejecutar `git add`.

> Para saber que hemos subido desde el `Working Tree` al `Index` en cada momento y ver las diferencias con el repositorio local ver los comandos `git difftool` y `git difftool --staged` explicados abajo.

`HEAD`
: Puntero al último commit de nuestro *repositorio local*

`master`
: Rama de desarrollo por defecto (trunk)

`origin`
: *Repositorio remoto* por defecto

{:.center}
![Git workflow](/git_commands.png "Git workflow")

<div class="center">Workflow de git donde se puede ver <code>Working Tree</code>, <code>Index</code>, <code>HEAD</code> y <code>origin</code> (remoto)</div><br />

> [Ver glosario de términos](https://www.kernel.org/pub/software/scm/git/docs/gitglossary.html)


---

# Guía rápida

## Configuración

Ver configuración global (o del repositorio actual)
: {% highlight sh %}
    $ git config -l
{% endhighlight %}

Setear valores de la configuración global (fichero ~/.gitconfig)
: {% highlight sh %}
    $ git config --global user.name "John Doe"
{% endhighlight %}

Guardar passwords con Gnome keyring (sólo para https, no ssh)
: {% highlight sh %}
# Probado en Ubuntu 14.04
sudo apt-get install libgnome-keyring-dev
cd "`dirname $(locate git-credential-gnome-keyring)`"
make
git config --global credential.helper "`dirname $(locate git-credential-gnome-keyring)`"/git-credential-gnome-keyring
{% endhighlight %}

> [Ejemplo de configuración completa (alias incluídos)](/gitconfig)

Guardar password (en plano, sin encriptar)
: {% highlight sh %}
$ git config credential.helper store
{% endhighlight %}
<br />

## Creación de un repositorio

Crear repositorio `origin` (`--bare`), sin `Working Tree`
: {% highlight sh %}
$ ssh ares@mars.example.com
ares> git init --bare foo
Initialized empty Git repository in /u/ares/foo/.git
{% endhighlight %}

Clonar el repositorio y hacer checkout  de la rama `HEAD` (normalmente master)
: {% highlight sh %}
    $ git clone ares@mars.example.com:foo
{% endhighlight %}

Conectar directorio con contenido a un nuevo remoto (`origin`)
: {% highlight sh %}
$ cd foo
$ git init
$ git remote add origin ares@mars.example.com:foo
$ git add .
$ git commit -m 'initial commit'
$ git push -u origin master
{% endhighlight %}

> Para cambiar el repositorio remoto (o el usuario):
`git remote set-url origin https://<user>@<repo>`



A partir de ahí se puede hacer simplemente
: {% highlight sh %}
    $ git push
{% endhighlight %}

Crear repositorio referencia (para tener varias ramas en checkout, ver p. 82)
: {% highlight sh %}
$ git clone --bare http://foo/bar.git refrep
$ git clone --reference refrep http://foo/bar.git
$ git fetch --all (se deben hacer pulls periódicamente!!)
{% endhighlight %}

<br />

## Operaciones con Index

Añadir al `Index` cambios parciales de ficheros (se eligen de forma interactiva)
: {% highlight sh %}
    $ git add -p
{% endhighlight %}

Añadir todos los ficheros excepto nuevos (incluye modificados y eliminados)
: {% highlight sh %}
    $ git add -u
{% endhighlight %}

`git commit -a` equivale a:
: {% highlight sh %}
    $ git add -u; git commit;
{% endhighlight %}

Añadir todo (incluyendo ficheros nuevos, untracked)
: {% highlight sh %}
    $ git add -A
{% endhighlight %}

Borrar/mover fichero de `Working Tree` y del `Index`
: {% highlight sh %}
$ git rm <filename>
$ git mv <filename>
{% endhighlight %}

Unstage de todos los cambios subidos al `Index`
: {% highlight sh %}
    $ git reset
{% endhighlight %}

Borrar un fichero del `Index`
: {% highlight sh %}
    $ git reset <fichero>
{% endhighlight %}

Borrar cambios parciales (opuesto a git add -p)
: {% highlight sh %}
    $ git reset --patch
{% endhighlight %}


{:.center}
![Git workflow](/file_lifecycle.png "File lifecycle")

<div class="center">Ciclo de estados de un fichero</div><br />

<br />

## Operaciones con HEAD

### Commits

Ver árbol de commits de todas las ramas
: {% highlight sh %}
$ git log --graph --oneline --decorate --all
{% endhighlight %}

Ver donde apunta `HEAD`
: {% highlight sh %}
    $ git show-ref
{% endhighlight %}

Commit incluyendo mensaje de commit
: {% highlight sh %}
    $ git commit -m <mensaje>
{% endhighlight %}

Comitear un directorio vacío
: En git solo se puede hacer commit de ficheros.
Workaround: subir un directorio con un único fichero `.gitignore` en su interior

<br />

### Descartar cambios

Descartar todos los cambios del `Working Tree`
: {% highlight sh %}
$ git reset --hard
# o lo que es lo mismo:
$ git checkout -f
{% endhighlight %}

Checkout de `HEAD` al `Working Tree` de un fichero específico
: {% highlight sh %}
    $ [git reset HEAD <filename>] ; git checkout [--] <filename>
{% endhighlight %}
> “--” no es necesario siempre y cuando no exista una rama con el mismo nombre

Volver temporalmente a un commit antiguo (detached HEAD mode)
: {% highlight sh %}
$ git checkout <commit>
# para volver al commit/rama actual
$ git checkout master
{% endhighlight %}

Descartar los cambios locales hasta cierto commit
: {% highlight sh %}
    $ git reset --hard <commit>
{% endhighlight %}
> Esto solo es aconsejable si no se han publicado los commits mediante push, en caso contrario se aconseja usar el comando `git revert` (ver más abajo), que no modifica la historia sino que tan solo añade nuevos commits a modo de *patch*.

> Si de todas formas queremos forzar la sincronización con el repositorio remoto, borrando incluso commits, deberemos utilizar `git push -f origin master`

Descartar los cambios hasta el último commit publicado
: {% highlight sh %}
    $ git fetch [origin master]
    $ git reset --hard FETCH_HEAD
    $ [git clean -df]
{% endhighlight %}
> Obtenemos la referencia del último commit en remoto `FETCH_HEAD` para luego descartar los cambios mediante `get reset --hard`

> `git clean -df` elimina los ficheros untracked, para obtener un repositorio limpio tal y como lo encontraríamos tras hacer `git clone`

Recuperar commit anterior después de hacer `git reset --hard`
: {% highlight sh %}
    # buscamos en el reflog (commit de nuestra rama) el commit en cuestión
    $ git log -g
    $ git checkout <id_commit_anterior>
{% endhighlight %}

<br />

### Merge

Cambiar a la rama donde realizar merge
: {% highlight sh %}
    $ git checkout <rama>
{% endhighlight %}

Realizar merge
: {% highlight sh %}
    $ git merge <rama_a_mezclar_con_nuestra_rama>
{% endhighlight %}

Realizar merge pero no dejar constancia del mismo en el grafo de commits (aparecerá como un commit más de nuestra rama, no tendrá 2 padres)
: {% highlight sh %}
    $ git merge --squash
{% endhighlight %}

Abortar el merge si hay conflictos y no queremos continuar
: {% highlight sh %}
    $ git merge --abort
{% endhighlight %}

> `git pull` y `git push` son 2 casos especiales de merge. En el primero se hace merge de una rama remota sobre una local. En el segundo se hace a la inversa, ***siempre y cuando el merge sea `fast-forward`*** (de lo contrario se para la ejecución)

Forzar push sobre remoto (¡muy peligroso!)
: {% highlight sh %}
    $ git push --force
{% endhighlight %}

> Útil cuando se necesita subir lo que tenemos en local a remoto pero `git push` no nos deja porque las ramas local y remoto tienen divergencias. Peligro: ¡Se sobreescribirá todo lo que haya en remoto!

Forzar pull sobre local (¡muy peligroso!)
: {% highlight sh %}
    $ git fetch --all
    $ git reset --hard origin/master
    $ git checkout master
{% endhighlight %}

> Esto es útil cuando se ha hecho push --force anteriormente y necesitemos recuperar exactamente lo que tengamos en remoto. Peligro: ¡Se sobreescribirá todo lo que haya en local!

{:.center}
![Merge](/merge.png "Merge")

<div class="center">Merge de la rama feature con master</div><br />

<br />

### Rebase y Pull con rebase

> Se hace `git pull --rebase` para evitar merges "innecesarios" (aquellos que no estén mezclando líneas de trabajo distintas sino que sean simplemente producto de "timing" al hacer commit varios desarrolladores)

Hacer "merge" de nuestra rama con `master` sin realizar un nuevo commit (merge commit)
: {% highlight sh %}
    $ git checkout feature
    $ git rebase master
{% endhighlight %}

> Para que esto sea posible nuestros commits se desplazan al final de la rama master, que se usa como base de nuestra rama.

> El hecho de que la historia de nuestra rama continúe siendo lineal (sin merge commit) permite hacer merge con `fast-forward` sobre `master`.

> Esto no solo nos permite integrar de forma lineal los cambios de cualquier rama con master, sino que también nos permite hacer lo mismo con `master` y su rama remota (la instrucción `git push` no es más que un "atajo" para hacer merge `fast-forward` con la rama remota).

Obtener cambios de remoto e incorporar nuestros commits encima del resto de commits obtenidos
: {% highlight sh %}
    $ git pull --rebase
    # lo anterior equivale a:
    $ git fetch origin master
    $ git rebase origin/master
{% endhighlight %}

Continuar con el `rebase` una vez solucionados los conflictos con `git mergetool`
: {% highlight sh %}
    $ git rebase --continue
{% endhighlight %}

Abortar el `rebase` y volver a antes de su ejecución
: {% highlight sh %}
    $ git rebase --abort
{% endhighlight %}

Configurar `pull --rebase` por defecto para una rama específica
: {% highlight sh %}
    $ git config branch.branch-name.rebase yes
{% endhighlight %}

Configurar `pull --rebase` por defecto para ramas nuevas
: {% highlight sh %}
    $ git config --global branch.autosetuprebase remote|local|always
{% endhighlight %}

{:.center}
![Rebase](/rebase.png "Rebase")

<div class="center">Rebase de la rama feature con master</div><br />

<br />

### Edición de commits 
> Idealmente cada commit debe tener un objetivo específico al subirlo a remoto. Mientras se trabaja se pueden subir commits temporales, pero antes de hacer push se deberían editar (corregir mensajes, unir commits, etc.)

Cambiar el último commit borrando el commit anterior
: {% highlight sh %}
    $ git commit --amend
{% endhighlight %}

Rehacer el último commit borrado por accidente con amend
: {% highlight sh %}
$ git log -g
$ git checkout <commit_encontrado_con_historial_operaciones>
{% endhighlight %}

Deshechar los últimos n commits (p.61)
: {% highlight sh %}
$ git log -g
$ git reset HEAD~[n]
{% endhighlight %}

Deshacer commit añadiendo un nuevo commit, para que quede constancia en la historia (p.62)
: {% highlight sh %}
    $ git revert <hash_commit>
{% endhighlight %}

Rehacer la historia de commits (reordenar, split, join, etc)
: {% highlight sh %}
    $ git rebase -i HEAD~n (p.64)
{% endhighlight %}

Aplicar commit específico como commit actual
: {% highlight sh %}
    $ git cherry-pick (p.181)
{% endhighlight %}

<br />

## Ramas

Crear una nueva rama que apunta al commit actual y cambiar a esta
: {% highlight sh %}
    $ git checkout -b <nueva_rama>
{% endhighlight %}

O lo que es lo mismo
: {% highlight sh %}
$ git branch <nueva_rama>
$ git checkout <nueva_rama>
{% endhighlight %}

Crear una rama que comience en un commit particular y cambiar a esta
: {% highlight sh %}
    $ git checkout -b <nueva_rama> <hash_commit>
{% endhighlight %}

O lo que es lo mismo
: {% highlight sh %}
$ git checkout <hash_commit> (detached HEAD mode, no existe ninguna rama apuntando a este commit) (p.74)
$ git checkout -b <nueva_rama>
{% endhighlight %}

> Si las ramas no difieren (cuando creamos una rama nueva o después de hacer un merge entre 2 ramas), git no machacará los cambios no comitados. Los mantendrá para que los podamos aplicarlos en la nueva rama.

> Si las ramas difieren nos avisará para que realicemos commit o stash, o utilizar git checkout --merge para mezclar a 3, dejando el resultado en el `Working Tree` de la rama nueva (p.74)

Borrar una rama
: {% highlight sh %}
    $ git branch -d <nombre_rama>
{% endhighlight %}

Forzar el borrado de una rama que no está completamente mergeada (p. 75)
: {% highlight sh %}
    $ git branch -D <nombre_rama>
{% endhighlight %}

Ver rama upstream asociada a cada rama de nuestro repositorio
: {% highlight sh %}
$ git branch -vv (muestra el estado desde el último fetch)
$ git remote show origin (contactando con el remoto, más información)
{% endhighlight %}

Subir una rama al repositorio remoto
: {% highlight sh %}
    git push -u origin <branch>
{% endhighlight %}

Borrar rama del repositorio remoto
: {% highlight sh %}
    $ git push origin :rama_remoto
{% endhighlight %}

Forzar borrado en el repositorio local de las ramas borradas mediante el comando anterior en el remoto (es decir, actualizar el borrado en local)
: {% highlight sh %}
    $ git fetch --prune
{% endhighlight %}

Visualizar gráficamente el historial de las ramas
: {% highlight sh %}
    $ sudo apt-get install gitg
    $ gitg
{% endhighlight %}

<br />

## Comparación de ficheros

### Comparación entre "ramas"

Comparación entre `Working Tree` y `Index`
: {% highlight sh %}
    $ git difftool
{% endhighlight %}

Comparación entre `Index` y `HEAD`
: {% highlight sh %}
    $ git difftool --staged
{% endhighlight %}

Comparación entre `Working Tree` y `HEAD`
: {% highlight sh %}
    $ git difftool HEAD
{% endhighlight %}

Comparación entre `Working Tree` y remoto
: {% highlight sh %}
    $ git difftool origin/master
{% endhighlight %}

Comparación entre branches
: {% highlight sh %}
    $ git difftool origin/master origin/branch1
{% endhighlight %}

### Comparación entre commits

Ver todos los commits del repositorio actual
: {% highlight sh %}
    $ git log [-p]
{% endhighlight %}

> El parámetro `-p` (patch) muestra los cambios del commit

Ver todos los commits de un fichero específico
: {% highlight sh %}
    $ git log [--follow] [-p] <fichero>
{% endhighlight %}

> El parámetro `--follow` hace seguimiento de los cambios de un fichero incluso cuando este es renombrado

Comparar entre el `Working Tree` y un commit anterior
: {% highlight sh %}
    $ git difftool <hash_commit_anterior>
{% endhighlight %}

Comparación entre 2 commits
: {% highlight sh %}
    $ git difftool <hash_commit1> <hash_commit2>
{% endhighlight %}

<br />

## Stash

### Save stash
Save stash restoring `Working Tree` with last commit
: {% highlight sh %}
$ git stash save [<message>]
{% endhighlight %}
> Same as git stash (if you want to provide message `save` is mandatory)

> Saving stash implies `git reset --hard`

Save stash but keep `Index` intact
: {% highlight sh %}
$ git stash save --keep-index
{% endhighlight %}

Save stash including untracked files
: {% highlight sh %}
$ git stash save --include-untracked
{% endhighlight %}
> When stashing untracked files `git clean` is executed removing untracked files from `Working Tree`

> Use `--all` to stash and remove also ignored files

### Restore stash on Working Tree
Restore stash but don't drop stashed state
: {% highlight sh %}
$ git stash apply [--index] [<stashref>]
{% endhighlight %}
> Use `git stash list` to show stashes refs than can be applied and `git stash show` to see the changes

> Restore also `Index` (if possible) with the `--index` option

Restore stash and drop stashed state
: {% highlight sh %}
$ git stash pop [--index] [<stashref>]
{% endhighlight %}
> If there are conflicts stash is not removed. Resolve and remove manually (see below)

### Removing stashes
Remove last stash (or the stash specified)
: {% highlight sh %}
$ git stash drop [<stashref>]
{% endhighlight %}

Remove all stashes
: {% highlight sh %}
$ git clear
{% endhighlight %}

<br />

## Tags

Creating annotated tag (with extra info that lightweight tags don't have)
: {% highlight sh %}
$ git tag -a <tagname> -m "my tag message"
{% endhighlight %}

Tagging a specific commit
: {% highlight sh %}
$ git tag -a <tagname> [<commit_hash>]
{% endhighlight %}

Publishing tags
: {% highlight sh %}
# publishing specific tag
$ git push origin [tagname]
# publishing all tags
$ git push origin --tags
{% endhighlight %}

Obtaining remote tags
: {% highlight sh %}
$ git fetch --tags
{% endhighlight %}

Deleting tag
: {% highlight sh %}
# deleting tag from local repo
git tag -d <tagname>
# deleting tag from remote
git push origin :refs/tags/<tagname>
{% endhighlight %}

Creating branch at a specific tag
: {% highlight sh %}
git checkout -b <branchname> <tagname>
{% endhighlight %}

Creating archive from tag
: {% highlight sh %}
git archive -o <filename>.tar.gz <tagname>
# creating archive from last commit on current branch
git archive -o latest.zip HEAD
{% endhighlight %}

<br />

## Submodules

Add submodule
: {% highlight sh %}
$ git submodule add <repo_url>
{% endhighlight %}

Remove Submodule
: {% highlight sh %}
# delete the relevant section from the .gitmodules file at the root of the parent project
$ git add .gitmodules
# delete the relevant section from the config file located in the .git directory at the root of the project
$ git rm --cached path/to/submodule
$ rm -rf .git/modules/submodule_name
$ git commit -m "Removed <vendor> submodule." # only necessary if submodule was comitted
$ rm -rf path/to/submodule
{% endhighlight %}

Update to fixed commit (on main repo) of submodules
: {% highlight sh %}
# update submodules
$ git submodule update --init --recursive
{% endhighlight %}

Pull in the changes from main repo and submodules
: {% highlight sh %}
$ git pull --recurse-submodules
{% endhighlight %}
> This is the same as: `git pull` + `submodule update`

Upgrade specific submodule to last commit
: {% highlight sh %}
$ cd bundle/<plugin>
$ git pull origin master
{% endhighlight %}

Upgrade all submodules of the current repo to their last commit
: {% highlight sh %}
$ git submodule foreach git pull origin master
{% endhighlight %}

<br />

## Ignorar ficheros

Ficheros `.gitignore` con los ficheros a ignorar (ver sintáxis en p.44)
: Se pueden colocar en todo el `Working Tree` (si se comitean se comparten ficheros ignorados)

Ignorar ficheros por repositorio (no se comparten ignores con nadie)
: Fichero `.git/info/exclude`

Fichero de configuración con ignores (se puede compartir fichero entre varios repositorios de la misma máquina)
: {% highlight sh %}
    $ git config --global core.excludesfile ~/.gitignore
{% endhighlight %}

Ignorar cambios en ficheros tracked (todos los anteriores son para ficheros untracked)
: {% highlight sh %}
    $ git update-index --assume-unchanged
{% endhighlight %}

