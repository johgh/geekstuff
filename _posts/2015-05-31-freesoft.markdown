---
layout: blog
title:  "10 puntos clave sobre software libre"
permalink:  "software-libre-q&a"
date:   2015-06-02 00:00:01
category: Blog
---

## ¿Qué requisitos debe reunir un software para ser considerado libre?

Para que un software sea considerado *libre* debe preservar los derechos de uso, estudio, modificación y distribución del mismo, o lo que es lo mismo que cumpla con las [*4 libertades esenciales del software libre*](http://www.gnu.org/philosophy/free-sw.es.html).

## ¿Cuando y por qué surge el *software libre*?

En 1976, la ley americana del *Copyright Act* amenaza al movimiento de la *cultura hacker* enraizado en la tradición de la compartición de código sin restricciones a través de la red *ARPANET*.

En 1983, un *hacker* del *MIT*, Richard M. Stallman, decide crear el proyecto *GNU* con el fin de implementar un sistema tipo *UNIX* completamente *libre*. Es entonces que crea la licencia *GPL*, (licencia que continúa siendo, a día de hoy, la licencia *libre* más usada.

Algo más tarde es creada la *Free Software Foundation*, organización que promociona y proporciona soporte legal al uso de *software libre*. Esta organización se encarga, a día de hoy, del mantenimiento de la [definición de *software libre*](https://www.gnu.org/philosophy/free-sw.html), de un directorio de las licencias *libres* más importantes, y de la actualización de las licencias *GNU* (entre ellas la licencia *GPL* que actualmente se encuentra en su tercera revisión).

## *Open Source*, *Software Libre* y las licencias *Creative Commons*

En 1998, la *Open Source Initiative* (*OSI*) publicó la [*Open Source Definition*](http://opensource.org/docs/osd). Este documento basado en las [*DFSG*](http://www.debian.org/social_contract##guidelines), (a su vez fue basado en [*la definición de software libre de la FSF*](https://www.gnu.org/philosophy/free-sw.html)), define exactamente que software es es considerado *Open Source*. Aunque existen pequeñas diferencias entre la definición de *Open Source* y la de *software libre*, ambos términos son usados de forma intercambiable por ser ampliamente equivalentes. Más interesante, que esos mátices técnicos es el enfoque conceptual, conocido como [modelo *Open Source*](http://csheets.tk/software-libre-q&a/#el-modelo-open-source)

<br />

{:.center}
![Software models](/softwaremodels.png "Ni todo el software libre es Open Source, ni todo Open Source es software libre")

<div class="center">Ni todo software libre es Open Source, ni todo el Open Source es software libre</div><br />

Existe un punto frecuente de confusión con las licencias que no permiten el uso comercial en los trabajos derivados, como las licencias [Creative Commons Non-Commercial](http://en.wikipedia.org/wiki/Creative_Commons##Criticism_of_the_non-commercial_license). Este tipo de licencias no son ni *libres* ni *Open Source*, ya que ambas definiciones no contemplan este tipo de restricciones sobre los trabajos derivados. Hay otras licencias *Creative Commons* que sin embargo si que cumplen con los estándares de las licencias libres y/o *open source*.

## El modelo Open Source

Aunque los detractores del uso del término *Open Source* lo critican por no hacer referencia al concepto moral de libertad y por considerarlo poco más que una estrategia de marketing, el término *Open Source* ha tenido en el sector empresarial más éxito que su análogo *software libre*.

Esto ha sido posible, en gran medida, gracias al tono neutro (no ideológico) del propio término y al carácter pragmático del *movimiento Open Source*. Este enfoque ha permitido la adopción de un modelo de desarrollo tipo *Open Source* incluso por parte de algunas empresas que no basan su modelo de negocio en el *software libre*.

El modelo *Open Source* se sustenta en el [siguiente axioma](http://es.wikipedia.org/wiki/Ley_de_Linus): «Dado un número suficientemente elevado de ojos, todos los errores se convierten en obvios» La idea anterior implica de partida que el software *Open Source* siempre será de mayor calidad que el que no lo es, ya que su código estará sometido a una mayor revisión. Desde ese punto de vista el software *Open Source* basa su fuerza en su carácter colaborativo y en la *comunidad* que consiga aglutinar detrás de cada proyecto.

La adopción de un modelo *Open Source* se puede efectuar en diferentes grados: ya sea utilizando modelos de desarrollo distribuido inspirados en el *software libre* - aunque no se trate de *software libre* propiamente dicho - o abriendo partes sensibles de una base de código propietario para obtener soporte por parte de la *comunidad*.

Recientemente el término *Open Source* se ha extendido incluso fuera del mundo del software para referirse a lo que en castellano se conoce como [*cultura libre*](http://es.wikipedia.org/wiki/C%C3%B3digo_abierto##Extensiones_del_concepto).

## Diferentes tipos de licencias libres

Para poder decir que una licencia es *libre* debe cumplir con *las 4 libertades esenciales* definidas por la *FSF*. Si vamos más allá, sin embargo, encontramos diferencias importantes entre licencias *libres*.

Las primeras licencias *libres* que comenzaron a hacer uso del copyright para poder ser defendidas legalmente fueron las licencias *GPL* y *BSD*, ambas creadas en el año 1989. La principal diferencia entre estos dos tipos de licencia es que las primeras, conocidas como licencias de *copyleft fuerte*, imponen la obligación de que el software derivado de un programa con dicha licencia se tenga que adherir a la misma. Por otro lado, las licencias de tipo *permisivo* (como *BSD* o *MIT*), permiten la modificación de las licencias de los trabajos derivados y la posibilidad incluso de *cerrar el código* en futuros trabajos. De hecho, estas licencias suelen ser casi idénticas al software de dominio público no sujeto a derechos de autor.

Algunos partidarios del uso de licencias *permisivas* comenzaron a usar las palabras *cláusula viral* de forma peyorativa para referirse al *copyleft* de las licencias *GNU*. Esto fue debido al efecto *absorción* que ejercieron en sus inicios sobre el software con licencias *BSD*.

Este término ha sido reutilizado posteriormente por partidarios del software *propietario* que alegan que el *software libre* atenta contra los derechos de propiedad intelectual.

Existe un tercer tipo de licencia *libre* muy utilizado, conocido como *copyleft débil*. Estas licencias fueron diseñadas especialmente para su uso en librerías, permitiendo que sólo el código de la librería tenga que ser redistribuido en caso de modificación, en contraste con las licencias de *copyleft fuerte*.

## ¿Software *propietario* o *privativo*?

Hay distintos términos para referirse a todo aquel software que no es *libre*: tradicionalmente se ha usado el término *propietario* (como contraposición a *libre*) y *código cerrado* (como contraposición a *Open Source*). Más recientemente R.M. Stallman ha propuesto el término *software privativo*, al considerarlo más adecuado que el de *propietario* si tenemos en cuenta que este puede restringe las libertades del usuario.

Además, el término *propietario* es confuso, puesto que el *software libre* sí tiene propietario: es el copyright el que da validez legal a cualquier licencia *libre*. La posesión del copyright no sólo da el poder al desarrollador para cambiar la licencia en el momento que considere oportuno (o incluso para cerrar el código), sino que también lo acredita como fundador de una base de código, facilitándole su rentabilización.

## El modelo de negocio

En términos prácticos cualquier programa *libre* termina siendo *marginalmente gratuito* (nada impide cobrar por una aplicación pero el código fuente siempre debe ser redistribuido). Aunque existen modelos de negocio relacionados con la licenciación de binarios, el modelo de negocio más importante dentro del *software libre* es, por lógica, el de la venta de servicios relacionados con el propio software.

Entre los modelos de negocio directos del *software libre* encontramos:

* Venta de soporte y servicios de programación sobre un software propio.
* Venta de formación y titulaciones.
* La introducción en el mercado de una aplicación/sistema *libre* para obtener algún beneficio indirecto, ya sea mediante la venta de un hardware o mediante ingresos por publicidad.
* Producir ingresos mediante la petición de donaciones y/o crowdfunding o la venta de licencias de binarios para diferentes tipos de sistema.

Además existen otros beneficios asociados al uso/desarrollo de aplicaciones *libres* para empresas y desarrolladores:

* Utilización de partes de código y herramientas *libres* en la producción de otro software (ya sea *libre* o *propietario*)
* Adaptación/configuración de software existente a los requisitos del cliente (la localización de los servicios es uno de los puntos fuertes del *software libre*, por su naturaleza distribuida)
* Soporte/formación de aplicaciones ajenas.
* Obtención de soporte gratuito por parte de la *comunidad*, disminuyendo la inversión en el mantenimiento de aplicaciones.

## ¿Qué licencia le conviene usar a cada desarrollador?

Ya que no existe un único modelo de negocio en el *software libre*, como hemos visto anteriormente, tampoco tiene porque ser utilizado el mismo tipo de licencia *libre* en cada uno de ellos:

* Una licencia de *copyleft fuerte* obliga al desarrollador a distribuir en igualdad de condiciones su código junto con el heredado. Como contrapartida le permite tener la seguridad de que cualquier contribución posterior por parte de terceras personas se hará también bajo las mismas condiciones. Todo aquel que contribuya código tiene la garantía de que su código no podrá ser reutilizado en proyectos no *libres* (mientras el propietario de los derechos no cambie la licencia).

* Una licencia de *copyleft débil* permite el uso de librerías sin la necesidad de publicar el código derivado propio. Para el desarrollador de una librería estas licencias resultan interesantes porque garantizan una flexibilidad mayor a quienes las van a usar y por tanto una mayor probabilidad de que una *comunidad*, o al menos un mayor número de usuarios, se establezca alrededor de su proyecto.

* Una licencia *permisiva* (tipo *BSD*) permite la apropiación del código sin la necesidad de contribución al mismo tras publicar un trabajo derivado. Es la licencia que provee a cada desarrollador de mayor libertad, pero también de menores garantías para que el código siga siendo *libre* en el futuro.

## ¿Por qué le conviene usar *software libre* al usuario final?

De las 4 libertades esenciales propias de todo *software libre*, las 2 primeras libertades afectan directamente al usuario final, estas son:

* Libertad 0: La libertad de ejecutar el programa para cualquier propósito.
* Libertad 1: La libertad de estudiar cómo funciona el programa, y cambiarlo para que haga lo que usted quiera.

Estas libertades, tienen el objetivo de liberar al usuario de la dependencia de un software, y por ende de los posibles intereses de la empresa que posea sus derechos. El usuario controla al software y no al revés. Cuando un software no funciona bien, o no hace lo que el usuario quiere, puede cambiarlo él mismo. Además puede dedicarse a estudiarlo con fines didácticos.

Las libertades 2 y 3 tienen que ver con la distribución del *software libre*, es decir, con el acceso por parte de los usuarios al mismo.

* Libertad 2: La libertad de redistribuir copias para ayudar a su prójimo.
* Libertad 3: La libertad de distribuir copias de sus versiones modificadas a terceros.

Todo el mundo tiene las mismas posibilidades de acceso al *software libre* (a diferencia del software *propietario*, donde una licencia de uso puede costar varios cientos de euros). No sólo eso, se reduce el riesgo de monopolio y de la aparición de seudo-estándares con el propósito de perjudicar a posibles competidores.

El uso de estándores y la transparencia en los sistemas *libres* es uno de sus puntos fuertes, cualquier usuario puede conocer los componentes que forman un sistema libre y colaborar con la *comunidad* mediante la detección de errores y/o aportando soluciones.

Existen algunos beneficios adicionales que son posibles gracias al acceso al código fuente. Coinciden en gran parte con las *ventajas pragmáticas* que suele promocionar el movimiento *Open Source*:

* El ahorro en licencias. Tanto para las empresas como para los estados.

* La mejora en la seguridad de todo software que abre su código, gracias a que todo el mundo puede revisarlo.

* La posibilidad de investigar software espía o malware y advertir a los demás usuarios de su existencia. De otra forma solo podemos confiar ciegamente en las buenas intenciones del autor del código.

## ¿Por qué seguimos usando software que no es *libre*?

Si utilizar *software libre* tiene tantas ventajas, ¿por qué la mayoría de la gente sigue utilizando aplicaciones y sistemas operativos *propietarios*?

Es posible que en algunos casos este software *propietario* sea de mayor calidad que su alternativa *libre*, sin embargo esa no parece la principal motivación para su uso. El software, como cualquier otra tecnología tiende al monopolio de forma natural. Esto es así debido a que los usuarios rechazan inicialmente cualquier software distinto al que ya conocen debido a la curva de aprendizaje inicial que deben superar hasta adaptarse.

Casos recientes, como el de la masiva aceptación del sistema *Android* (basado en gran parte en *software libre*) han demostrado que no hay nada que impida la aceptación del *software libre* por parte de los usuarios finales. Quizás, después de todo, el hecho de que los sistemas *GNU/Linux* de escritorio no hayan llegado todavía al gran público sea en parte una cuestión de promoción por parte de las grandes corporaciones.

{:.center}
![GNU/Linux with GPL armor](/gnu-and-penguin-color-300x276.jpg "GNU/Linux con armadura GPL")

<div class="center">GNU/Linux con armadura GPL</div><br />

> **Última actualización: 09 Ago 2015**

***

* [http://smeguide.conecta.it/index.php/2._Ten_myths_about_free/libre_open_source_software](http://smeguide.conecta.it/index.php/2._Ten_myths_about_free/libre_open_source_software)
* [https://www.gnu.org/philosophy/categories.html](https://www.gnu.org/philosophy/categories.html)

