---
layout: post
title:  "Symfony2"
permalink:  "symfony"
date:   2015-08-16 16:30:15
category: Reference
tags: Web
---
> The following was tested with Symfony 2.7 on Ubuntu 14.04

# Symfony resources

* [Best practices](http://symfony.com/doc/current/best_practices)
* [Cookbook](http://symfony.com/doc/current/cookbook)
* [Book](http://symfony.com/doc/current/book)

# Installation

### Documentation
* [symfony 2.7 installation doc](http://symfony.com/doc/2.7/book/installation.html)

Download installer
: {% highlight bash %}
# instead of curl, you can download from browser and move to /usr/local/bin/symfony
$ sudo curl -LsS http://symfony.com/installer -o /usr/local/bin/symfony
$ sudo chmod a+x /usr/local/bin/symfony
{% endhighlight %}

Create new project
: {% highlight bash %}
$ cd ~/workspace
$ symfony new my_project_name
# create symlink to web server
$ sudo ln -s ~/workspace/my_project_name/web /var/www/my_project_name
{% endhighlight %}

Meet Symfony Requirements (if needed)
: {% highlight bash %}
# put these lines on /etc/php5/cli/php.ini and /etc/php5/apache2/php.ini
date.timezone = Europe/Madrid
xdebug.max_nesting_level=250
# recheck requirements
$ php my_project_name/app/check.php
{% endhighlight %}

Set permissions (set acls cli + web server)
: {% highlight bash %}
$ sudo setfacl -R -m u:"www-data":rwX -m u:`whoami`:rwX app/cache app/logs
$ sudo setfacl -dR -m u:"www-data":rwX -m u:`whoami`:rwX app/cache app/logs
{% endhighlight %}

Configure app from Web
: Go to [http://localhost/my_project_name/config.php](http://localhost/my_project_name/config.php)

> You will need to `chmod o+w app/config/parameters.yml` and restore permissions with `o-w` once the web config is done

> You can also edit the yaml config file: `app/config/parameters.yml` directly 

Access app from php server (with debug info)
: {% highlight bash %}
# Run server
$ cd ~/workspace/my_project_name
$ php app/console server:run
# Now you can access app on localhost:8000
{% endhighlight %}

Install Composer
: {% highlight bash %}
$ curl -sS https://getcomposer.org/installer | php
$ sudo mv composer.phar /usr/local/bin/composer
{% endhighlight %}

Updating project (vendor directory)
: {% highlight bash %}
$ cd ~/workspace/my_project_name
$ composer update
# to check vulnerabilities
$ php app/console security:check
{% endhighlight %}

Cleaning cache (might solve error 500)
: {% highlight bash %}
$ php app/console cache:clear --env=prod
{% endhighlight %}

Removing Acme bundle (demo bundle that comes with Symfony Standard Edition)
: Read [this](https://symfony.com/doc/current/cookbook/bundles/remove.html)

Download Symfony Demo
: {% highlight bash %}
$ sudo apt-get install php5-sqlite
$ symfony demo
{% endhighlight %}

# Quick Guide

## Directory structure

Important dirs
: 
* Application views: `app/Resources/views`
* Application assets: `app/Resources/public`
* Application PHP code: `src/AppBundle`
* Third party libraries: `vendor/`
* Public files: `web/`

> [Directory structure explanation](https://symfony.com/doc/current/book/page_creation.html#exploring-the-project)

Important files
: 
* Routing file: `app/config/routing.yml`
* Database config file: `app/config/parameters.yml`
* Development front controller: `web/app_dev.php`
* Production front controller: `web/app.php`
* Enable new bundles: `app/AppKernel.php`
* Symfony config: `app/config/config.yml`, `app/config/config_prod.yml`, `app/config/config_dev.yml`

> For config options: `$ app/console config:dump-reference <something>` or see [config reference](https://symfony.com/doc/current/reference/index.html)

## Controllers

### Documentation
* [symfony 2.7 controllers doc](http://symfony.com/doc/2.7/book/controller.html)

### Request object
{% highlight php startinline %}
{% raw %}
use Symfony\Component\HttpFoundation\Request;
/**
 * @Route("/hello/{firstName}/{lastName}", name="hello")
 */
public function indexAction(Request $request, $firstName, $lastName = 'default')
{
    $request->isXmlHttpRequest(); // is it an Ajax request?
    $request->getPreferredLanguage(array('en', 'fr'));
    $request->query->get('page'); // get a $_GET parameter
    $request->request->get('page'); // get a $_POST parameter
}
{% endraw %}
{% endhighlight %}


### Response object
{% highlight php startinline %}
{% raw %}
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpFoundation\JsonResponse;
class LuckyController
{
/**
* @Route("/api/lucky/number")
*/
public function indexAction()
{
    // ...

    // calls json_encode and sets the Content-Type header
    return new JsonResponse($data);

    // above is the same as:
/*
    return new Response(
        json_encode($data),
        Response::HTTP_OK,
        array('Content-Type' => 'application/json')
    );
*/
    // and:
/*
    $response = new Response(json_encode($data));
    $response->headers->set('Content-Type', 'application/json');
*/
}
{% endraw %}
{% endhighlight %}

### Sessions
{% highlight php startinline %}
{% raw %}
use Symfony\Component\HttpFoundation\Request;
public function indexAction(Request $request)
{
    $session = $request->getSession();

    // store an attribute for reuse during a later user request
    $session->set('foo', 'bar');

    // get the attribute set by another controller in another request
    $foobar = $session->get('foobar');

    // use a default value if the attribute doesn't exist
    $filters = $session->get('filters', array());
}
{% endraw %}
{% endhighlight %}


### Flash messages
{% highlight php startinline %}
{% raw %}
    this->addFlash(
                'notice',
                'Your changes were saved!'
            );

            // $this->addFlash is equivalent to $this->get('session')->getFlashBag()->add

            return $this->redirectToRoute(...);
{% endraw %}
{% endhighlight %}

{% highlight jinja %}
{% raw %}
    {% for flashMessage in app.session.flashbag.get('notice') %}
        <div class="flash-notice">
            {{ flashMessage }}
        </div>
    {% endfor %}
{% endraw %}
{% endhighlight %}

### Exceptions
{% highlight php startinline %}
{% raw %}
    if (!$product) {
        throw $this->createNotFoundException('The product does not exist');
    }
    
    // this returns a 500 http response code
    throw new \Exception('Something went wrong!');
{% endraw %}
{% endhighlight %}
    
### Extending from Base Controller
{% highlight php startinline %}
{% raw %}
// src/AppBundle/Controller/HelloController.php
namespace AppBundle\Controller;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;
class HelloController extends Controller
{
    // container services
    $templating = $this->get('templating');
    $router = $this->get('router');
    $mailer = $this->get('mailer');

    $html = $this->container->get('templating')->render(
        'lucky/number.html.twig',
        array('luckyNumberList' => $numbersList)
    );
        
    // shortcut for template rendering
/*
    return $this->render(
    'lucky/number.html.twig',
    array('luckyNumberList' => $numbersList)
    );
*/
}
{% endraw %}
{% endhighlight %}

> to list available services: `$ php app/console debug:container` 
    
    
### Redirecting
{% highlight php startinline %}
{% raw %}
public function indexAction()
{
    return $this->redirectToRoute('homepage');

    // redirectToRoute is equivalent to using redirect() and generateUrl() together:
    /* return $this->redirect($this->generateUrl('homepage'), 301); */
    // or simply providing an external url:
    /* return $this->redirect('http://symfony.com/doc'); */
}
{% endraw %}
{% endhighlight %}


---


## Templates

### Documentation
* [symfony 2.7 templating doc](http://symfony.com/doc/2.7/book/templating.html)
* For twig specific reference see [my twig doc](/twig/) or [the twig doc](http://twig.sensiolabs.org/documentation#reference)
* For symfony specific extensions see [this](http://symfony.com/doc/current/reference/twig_reference.html)

### Three-level Inheritance (best practice)
Base template
: `base.html.twig`

Section specific
: `section/layout.html.twig`: extends from base.html.twig

Page specific
: `section/index.html.twig`: extends from layout.html.twig

### Referencing templates

Application views (`app/Resources/views`)
:   
    * `base.html.twig`
    * `layout.html.twig` (default global layout)
    * `section/layout.html.twig` (specific section layout)
    * `section/index.html.twig` (specific page)

Bundle views (`path/to/bundle/Resources/views/`)
:   
    * `AcmeBundle:section:index.html.twig`
    * `AcmeBundle::layout.html.twig`

Examples
: {% highlight jinja %}
{% raw %}
{% extends 'base.html.twig' %}
{% extends 'blog/layout.html.twig' %}
{{ include('section/index.html.twig') }}
{{ include(AcmeBundle:section:index.html.twig') }}
{% endraw %}
{% endhighlight %}

### Embedding controllers

Embedded controller
: {% highlight jinja %}
{% raw %}
<div id="sidebar">
    {{ render(controller(
        'AppBundle:Article:recentArticles',
        { 'max': 3 }
    )) }}
</div>
{% endraw %}
{% endhighlight %}


Asynchronous embedded controller
: {% highlight jinja %}
{% raw %}
{{ render_hinclude(controller('...'),  {
    'default': 'default/content.html.twig'
}) }}
{{ render_hinclude(controller('...'), {'default': 'Loading...'}) }}
{% endraw %}
{% endhighlight %}

Default globals
: {% highlight yaml %}
{% raw %}
# app/config/config.yml
framework:
    # ...
    templating:
        hinclude_default_template: hinclude.html.twig
{% endraw %}
{% endhighlight %}
        
        
### Url generation

Controller url reference
: {% highlight jinja %}
{% raw %}
 <a href="{{ path('_welcome') }}">Home</a>       
{% endraw %}
{% endhighlight %}

Controller url with dynamic parameter
: {% highlight jinja %}
{% raw %}
{% for article in articles %}
    <a href="{{ path('article_show', {'slug': article.slug}) }}">
        {{ article.title }}
    </a>
{% endfor %}
{% endraw %}
{% endhighlight %}

Absolute url generation
: {% highlight jinja %}
{% raw %}
<a href="{{ url('_welcome') }}">Home</a>
{% endraw %}
{% endhighlight %}

### Assets
{% highlight jinja %}
{% raw %}
{% block stylesheets %}
    <link href="{{ asset('css/main.css') }}" rel="stylesheet" />
    <link href="{{ asset('bundles/acmedemo/css/contact.css') }}" rel="stylesheet" />
{% endblock %}
{# ... #}
{% block javascripts %}
    <script src="{{ asset('js/main.js') }}"></script>
{% endblock %}
{% endraw %}
{% endhighlight %}

> Move assets (default to `web`) with: php app/console assets:install target [--symlink]


### Global variables

app.security
: The security context.

app.user
: The current user object.

app.request
: The request object.

app.session
: The session object.

app.environment
: The current environment (dev, prod, etc).

app.debug
: True if in debug mode. False otherwise. 

> Global variables can be added from config file (see [App parameters](/symfony/#tocAnchor-1-7-3))

### Adding extensions to twig
* Read [this](http://symfony.com/doc/current/cookbook/templating/twig_extension.html)


---


## Configuration

### Documentation
* [Best practices](http://symfony.com/doc/current/best_practices/configuration.html)
* [Parameters](http://symfony.com/doc/current/components/dependency_injection/parameters.html)
* [External parameters](http://symfony.com/doc/current/cookbook/configuration/external_parameters.html)
* [Load config per bundle](http://symfony.com/doc/current/cookbook/bundles/extension.html)
* [Friendly config per bundle](http://symfony.com/doc/current/cookbook/bundles/configuration.html)

### Configuration files

Infrastructure related
: Files: `app/config/parameters.yml`

> This file is unique per server (infrastructure), this file should be only on prod environment, not on version control.

Canonical parameters
: Files: `app/config/parameters.yml.dist`

> This file defines the parameters needed on previous file, should be on version control.

Application-Related
: Files: `app/config/config_dev.yml`, `app/config/config_prod.yml`, `app/config/config.yml`

> Symfony configuration. `config_dev.yml` and `config_prod.yml` files can override `config.yml` settings.

### Controller/twig parameters

Config file
: {% highlight yaml %}
{% raw %}
    parameters:
        app.version: 00.00.01
    # make app.version value accesible for twig templates
    twig:
        globals:
            version: %app.version%
{% endraw %}
{% endhighlight %}

> This parameters could be on any config file or in a separate file (for example: app_parameters.yml) imported from `config_dev.yml`, `config_prod.yml`, `config.yml`, using `import` parameter from top of the file

App parameter from controller
: {% highlight php startinline %}
{% raw %}
    $container->getParameter('app.version');
    $container->setParameter('app.version', '00.00.02');
{% endraw %}
{% endhighlight %}

App parameter from twig
: {% highlight jinja %}
{% raw %}
    {{ version }}
{% endraw %}
{% endhighlight %}


---


## Forms and validation

### Validation
* [The validator service](http://symfony.com/doc/current/book/validation.html)

### Forms
* [Forms doc](http://symfony.com/doc/current/book/forms.html)
* [Best practices](http://symfony.com/doc/current/best_practices)
* [Form cookbook](http://symfony.com/doc/current/cookbook/form)
* [Form validation](http://symfony.com/doc/current/book/forms.html#form-validation)
* [Create a separate Form class](http://symfony.com/doc/current/book/forms.html#creating-form-classes)
* [Forms with ajax (not tested)](http://codemonkeys.be/2013/01/ajaxify-your-symfony2-forms-with-jquery/)

#### Form data

* [Form data object](http://symfony.com/doc/current/book/forms.html#creating-a-simple-form)
* [Embedded Form data objects](http://symfony.com/doc/current/book/forms.html#embedded-forms)
* [Form without Form data object](http://symfony.com/doc/current/book/forms.html#using-a-form-without-a-class)

#### Form rendering
* [Render Form manually](http://symfony.com/doc/current/book/forms.html#rendering-a-form-in-a-template)
* [Form theming](http://symfony.com/doc/current/book/forms.html#form-theming)


---


## Translations

### Config

### Using the translator

Keyword messages
$translator->trans('symfony.great');


symfony:
    great: Symfony is great
    amazing: Symfony is amazing
    bundles: Symfony has bundles
user:
    login: Login

Pluralization
'{0} There are no apples|[20,Inf[ There are too much apples|singular: There is one apple|plural: There are %count% apples'

tags are optional

From controller:
$translator->trans(
$translator->transChoice(

From twig:
{% trans %}Hello %name%{% endtrans %}

{% transchoice count %}
    {0} There are no apples|{1} There is one apple|]1,Inf[ There are %count% apples
{% endtranschoice %}
