---
layout: post
title:  "Git"
permalink:  "git"
date:   2015-07-02 16:30:15
category: Quick Guides
tags: Sysadmin Web
---
> Nota: Cuando se hace referencia a una página (por ej.: p.82), se está haciendo referencia al libro ```Git Pocket Guide(O’Reilly)```


# Terminología

Working tree
: Ficheros que tenemos en el workspace

Index (staging)
: Es el snapshot que será traspasado al ejecutar ```git commit``` a nuestro repositorio local. Cada vez que ejecutamos ```git add``` los ficheros se añaden tal cual están en ese momento, si luego se hacen más cambios sobre los mismos ficheros se deberá volver a ejecutar ```git add```.

> Para saber que hemos subido desde el ```WORKING TREE``` al ```INDEX``` en cada momento y ver las diferencias con el repositorio local ver los comandos ```git difftool``` y ```git difftool --staged``` explicados abajo.

HEAD
: Puntero al último commit.

Master
: Rama creada por defecto (trunk)

Origin
: Repositorio remoto por defecto

> Ver más términos [aquí](https://www.kernel.org/pub/software/scm/git/docs/gitglossary.html)

---


# Configuración

Para ver la configuración global (o del repositorio donde nos encontremos)
: {% highlight sh %}
    $ git config -l
{% endhighlight %}

Para setear valores de la configuración global (fichero ~/.gitconfig)
: {% highlight sh %}
    $ git config --global user.name "John Doe"
{% endhighlight %}

Guardar passwords con Gnome keyring (Solo funciona con repositorios https)
: {% highlight sh %}
# Tested in Ubuntu 14.04
sudo apt-get install libgnome-keyring-dev
cd "`dirname $(locate git-credential-gnome-keyring)`"
make
git config --global credential.helper "`dirname $(locate git-credential-gnome-keyring)`"/git-credential-gnome-keyring
{% endhighlight %}

---

# Iniciar repositorio

Crear repositorio central (--bare), que no será usado directamente
: {% highlight sh %}
$ ssh ares@mars.example.com
ares> git init --bare foo
Initialized empty Git repository in /u/ares/foo/.git
{% endhighlight %}

Para clonar el repositorio y hacer checkout  de la rama ```HEAD``` (normalmente master)
: {% highlight sh %}
    $ git clone ares@mars.example.com:foo
{% endhighlight %}

Conectar directorio con contenido a un nuevo remoto (origen)
: {% highlight sh %}
$ cd foo
$ git init
$ git remote add origin ares@mars.example.com:foo
$ git add .
$ git commit -m 'initial commit'
$ git push -u origin master
{% endhighlight %}

A partir de ahí se puede hacer simplemente
: {% highlight sh %}
    $ git push
{% endhighlight %}

Crear repositorio referencia (para tener varias ramas en checkout, ver p. 82)
: {% highlight sh %}
$ git clone --bare http://foo/bar.git refrep
$ git clone --reference refrep http://foo/bar.git
$ git fetch --all (se deben hacer pulls periódicamente!!)
{% endhighlight %}

---

# Ignorar ficheros

Ficheros `.gitignore` con los ficheros a ignorar (ver sintáxis en p.44)
: Se pueden colocar en todo el ```WORKING TREE``` (si se comitean se comparten ficheros ignorados)

Ignorar ficheros por repositorio (no se comparten ignores con nadie)
: Fichero `.git/info/exclude`

Fichero de configuración con ignores (se puede compartir fichero entre varios repositorios de la misma máquina)
: {% highlight sh %}
    $ git config --global core.excludesfile ~/.gitignore
{% endhighlight %}

Ignorar cambios en ficheros tracked (todos los anteriores son para ficheros untracked)
: {% highlight sh %}
    $ git update-index --assume-unchanged
{% endhighlight %}

---

# Comparación de ficheros

## Comparación entre “branches”

Comparación entre ```WORKING TREE``` y ```INDEX```
: {% highlight sh %}
    $ git difftool
{% endhighlight %}

Comparación entre ```INDEX``` y ```HEAD```
: {% highlight sh %}
    $ git difftool --staged
{% endhighlight %}

Comparación entre ```WORKING TREE``` y ```HEAD```
: {% highlight sh %}
    $ git difftool HEAD
{% endhighlight %}

Comparación entre ```WORKING TREE``` y remoto
: {% highlight sh %}
    $ git difftool origin/master
{% endhighlight %}

Comparación entre branches
: {% highlight sh %}
    $ git difftool origin/master origin/branch1
{% endhighlight %}

## Comparación entre commits

Para ver todos los commits del repositorio actual
: {% highlight sh %}
    $ git log
{% endhighlight %}

Para ver todos los commits de un fichero específico
: {% highlight sh %}
    $ git log <fichero>
{% endhighlight %}

Comparar entre el ```WORKING TREE``` y un commit anterior
: {% highlight sh %}
    $ git difftool <hash_commit_anterior>
{% endhighlight %}

Comparación entre 2 commits
: {% highlight sh %}
    $ git difftool <hash_commit1> <hash_commit2>
{% endhighlight %}

---

# Operaciones con INDEX

Añadir al índice cambios parciales de ficheros (se eligen de forma interactiva)
: {% highlight sh %}
    $ git add -p
{% endhighlight %}

Añadir todos los ficheros excepto nuevos (incluye modificados y eliminados)
: {% highlight sh %}
    $ git add -u
{% endhighlight %}

git commit -a , equivale a
: {% highlight sh %}
    $ git add -u; git commit;
{% endhighlight %}

Añadir todo (incluyendo ficheros nuevos, untracked)
: {% highlight sh %}
    $ git add -A
{% endhighlight %}

Borrar/mover fichero de ```WORKING TREE``` y del ```INDEX```
: {% highlight sh %}
$ git rm <filename>
$ git mv <filename>
{% endhighlight %}

Unstage de todos los cambios subidos al ```INDEX```
: {% highlight sh %}
    $ git reset
{% endhighlight %}

Borrar un fichero del ```INDEX```
: {% highlight sh %}
    $ git reset <fichero>
{% endhighlight %}

Borrar cambios parciales (opuesto a git add -p)
: {% highlight sh %}
    $ git reset --patch
{% endhighlight %}

---

# Operaciones con HEAD

## Commits

Ver historial de commits
: {% highlight sh %}
$ git log [<fichero>]
$ git log --graph --oneline --decorate
{% endhighlight %}

Ver donde apunta ```HEAD``` (commit y rama)
: {% highlight sh %}
    $ git show-ref
{% endhighlight %}

Commit incluyendo mensaje de commit
: {% highlight sh %}
    $ git commit -m <mensaje>
{% endhighlight %}

Comitear un directorio vacío
: En git solo se puede hacer commit de ficheros.
Workaround: subir un directorio con un único fichero `.gitignore` en su interior

<br />

## Descartar cambios

Descartar todos los cambios del ```WORKING TREE```
: {% highlight sh %}
$ git reset --hard
# o lo que es lo mismo:
$ git checkout -f
{% endhighlight %}

Checkout de ```HEAD``` al ```WORKING TREE``` de un fichero específico
: {% highlight sh %}
    $ [git reset HEAD <filename>] ; git checkout [--] <filename>
{% endhighlight %}
> “--” no es necesario siempre y cuando no exista una rama con el mismo nombre

Volver temporalmente a un commit antiguo (detached HEAD mode)
: {% highlight sh %}
$ git checkout <commit>
# para volver al commit/rama actual
$ git checkout master
{% endhighlight %}

Descartar los cambios locales hasta cierto commit
: {% highlight sh %}
    $ git reset --hard <commit>
{% endhighlight %}
> Esto solo es aconsejable si no se han publicado los commits mediante push, en caso contrario se aconseja usar el comando `git revert` (ver más abajo), que no modifica la historia sino que tan solo añade nuevos commits a modo de *patch*.

> Si de todas formas queremos forzar la sincronización con el repositorio remoto, borrando incluso commits, deberemos utilizar `git push -f origin master`

Descartar los cambios hasta el último commit publicado
: {% highlight sh %}
    $ git fetch [origin master]
    $ git reset --hard FETCH_HEAD
    $ [git clean -df]
{% endhighlight %}
> Obtenemos la referencia del último commit en remoto `FETCH_HEAD` para luego descartar los cambios mediante `get reset --hard`

> `git clean -df` elimina los ficheros untracked, para obtener un repositorio limpio tal y como lo encontraríamos tras hacer `git clone`

Recuperar commit anterior después de hacer `git reset --hard`
: {% highlight sh %}
    # buscamos en el reflog (commit de nuestra rama) el commit en cuestión
    $ git log -g
    $ git checkout <id_commit_anterior>
{% endhighlight %}

<br />

## Merge
Cambiar a la rama donde realizar merge
: {% highlight sh %}
    $ git checkout <rama>
{% endhighlight %}

Realizar merge
: {% highlight sh %}
    $ git merge <rama con_la_que_mezclar_nuestra_rama>
{% endhighlight %}

Realizar merge pero no dejar constancia del mismo en el grafo de commits (aparecerá como un commit más de nuestra rama, no tendrá 2 padres)
: {% highlight sh %}
    $ git merge --squash
{% endhighlight %}

Abortar el merge si hay conflictos y no queremos continuar
: {% highlight sh %}
    $ git merge --abort
{% endhighlight %}

> `git pull` y `git push` son 2 casos especiales de merge. En el primero se hace merge de una rama remota sobre una local. En el segundo se hace a la inversa, ***siempre y cuando el merge sea fast-forward*** (de lo contrario se para la ejecución)

<br />

## Rebase y Pull with rebase
> Se hace pull with rebase para evitar hacer merges "innecesarios" (aquellos que no estén mezclando líneas de trabajo distintas sino que sean simplemente producto de “timing” al hacer commit varios desarrolladores)

Hacer "merge" de nuestra rama con `master` sin realizar un nuevo commit (merge commit)
: {% highlight sh %}
    $ git checkout feature
    $ git rebase master
{% endhighlight %}

> Para que esto sea posible nuestros commits se desplazan al final de la rama master, que se usa como base de nuestra rama.

> El hecho de que la historia de nuestra rama continúe siendo lineal (sin merge commit) permite hacer merge con fast-forward sobre `master`.

> Esto no solo nos permite integrar de forma lineal los cambios de cualquier rama con master, de igual forma nos permite hacer lo propio con `master` y su rama remota (ya que la instrucción `git push` no es más que un "atajo" para hacer hacer merge fast-forward con la rama remota).

Obtener cambios de remoto e incorporar nuestros commits encima del resto de commits obtenidos
: {% highlight sh %}
    $ git pull --rebase
    # lo anterior equivale a:
    $ git fetch origin master
    $ git rebase origin/master
{% endhighlight %}

Continuar con el rebase una vez solucionados los conflictos con `git mergetool`
: {% highlight sh %}
    $ git rebase --continue
{% endhighlight %}

Abortar el rebase y volver a antes de su ejecución
: {% highlight sh %}
    $ git rebase --abort
{% endhighlight %}

Configurar pull rebase para una rama específica
: {% highlight sh %}
    $ git config branch.branch-name.rebase yes
{% endhighlight %}

Configurar pull rebase para ramas nuevas
: {% highlight sh %}
    $ git config --global branch.autosetuprebase remote|local|always
{% endhighlight %}

<br />

## Edición de commits 
> Idealmente cada commit tenga un objetivo específico al subirlo a origin. Mientras se trabaja se pueden subir commits temporales, pero antes de hacer push se deberían editar (corregir mensajes, unir commits, etc.)

Cambiar el último commit borrando el commit anterior
: {% highlight sh %}
    $ git commit --amend
{% endhighlight %}

Rehacer el último commit borrado por accidente con amend
: {% highlight sh %}
$ git log -g
$ git checkout <commit_encontrado_con_historial_operaciones>
{% endhighlight %}

Deshechar los últimos n commits (p.61)
: {% highlight sh %}
$ git log -g
$ git reset HEAD~[n]
{% endhighlight %}

Deshacer commit añadiendo un nuevo commit, para que quede constancia en la historia (p.62)
: {% highlight sh %}
    $ git revert <hash_commit>
{% endhighlight %}

Rehacer la historia de commits (reordenar, split, join, etc)
: {% highlight sh %}
    $ git rebase -i HEAD~n (p.64)
{% endhighlight %}

Aplicar commit específico como commit actual
: {% highlight sh %}
    $ git cherry-pick (p.181)
{% endhighlight %}

---

# Ramas

Crear una nueva rama que apunta al commit actual y cambiar a esta
: {% highlight sh %}
    $ git checkout -b <nueva_rama>
{% endhighlight %}

O lo que es lo mismo
: {% highlight sh %}
$ git branch <nueva_rama>
$ git checkout <nueva_rama>
{% endhighlight %}

Crear una rama que comience en un commit particular y cambiar a esta
: {% highlight sh %}
    $ git checkout -b <nueva_rama> <hash_commit>
{% endhighlight %}

O lo que es lo mismo
: {% highlight sh %}
$ git checkout <hash_commit> (detached HEAD mode, no existe ninguna rama apuntando a este commit) (p.74)
$ git checkout -b <nueva_rama>
{% endhighlight %}

> Si las ramas no difieren (cuando creamos una rama nueva o después de hacer un merge entre 2 ramas), git no machacará los cambios no comitados. Los mantendrá para que los podamos aplicarlos en la nueva rama.

> Si las ramas difieren nos avisará para que realicemos commit o stash, o utilizar git checkout --merge para mezclar a 3, dejando el resultado en el ```WORKING TREE``` de la rama nueva (p.74)

Borrar una rama
: {% highlight sh %}
    $ git branch -d <nombre_rama>
{% endhighlight %}

Forzar el borrado de una rama que no está completamente mergeada (p. 75)
: {% highlight sh %}
    $ git branch -D <nombre_rama>
{% endhighlight %}

Ver rama upstream asociada a cada rama de nuestro repositorio
: {% highlight sh %}
$ git branch -vv (muestra el estado desde el último fetch)
$ git remote show origin (contactando con el remoto, más información)
{% endhighlight %}

Borrar rama del repositorio remoto
: {% highlight sh %}
    $ git push origin :rama_remoto
{% endhighlight %}

Forzar borrado en el repositorio local de las ramas borradas mediante el comando anterior en el remoto (es decir, actualizar el borrado en local)
: {% highlight sh %}
    $ git fetch --prune
{% endhighlight %}

Visualizar gráficamente el historial de las ramas
: {% highlight sh %}
    $ sudo apt-get install gitg
    $ gitg
{% endhighlight %}

---

# Stash

## Save stash
Save stash restoring working tree with last commit
: {% highlight sh %}
$ git stash save [<message>]
{% endhighlight %}
> Same as git stash (if you want to provide message ```save``` is mandatory)

> Saving stash implies ```git reset --hard```

Save stash but keep index intact
: {% highlight sh %}
$ git stash save --keep-index
{% endhighlight %}

Save stash including untracked files
: {% highlight sh %}
$ git stash save --include-untracked
{% endhighlight %}
> When stashing untracked files ```git clean``` is executed removing untracked files from working tree

> Use ```--all``` to stash and remove also ignored files

## Restore stash on Working Tree
Restore stash but don't drop stashed state
: {% highlight sh %}
$ git stash apply [--index] [<stashref>]
{% endhighlight %}
> Use ```git stash list``` to show stashes refs than can be applied and ```git stash show``` to see the changes

> Restore also index (if possible) with the ```--index``` option

Restore stash and drop stashed state
: {% highlight sh %}
$ git stash pop [--index] [<stashref>]
{% endhighlight %}
> If there are conflicts stash is not removed. Resolve and remove manually (see below)

## Removing stashes
Remove last stash (or the stash specified)
: {% highlight sh %}
$ git stash drop [<stashref>]
{% endhighlight %}

Remove all stashes
: {% highlight sh %}
$ git clear
{% endhighlight %}


---

# Submodules

Add submodule
: {% highlight sh %}
$ git submodule add <repo_url>
{% endhighlight %}

Remove Submodule
: {% highlight sh %}
# delete the relevant section from the .gitmodules file at the root of the parent project
$ git add .gitmodules
# delete the relevant section from the config file located in the .git directory at the root of the project
$ git rm --cached path/to/submodule
$ rm -rf .git/modules/submodule_name
$ git commit -m "Removed <vendor> submodule." # only necessary if submodule was comitted
$ rm -rf path/to/submodule
{% endhighlight %}

Update to fixed commit (on main repo) of submodules
: {% highlight sh %}
# update submodules
$ git submodule update --init --recursive
{% endhighlight %}

Pull in the changes from main repo and submodules
: {% highlight sh %}
$ git pull --recurse-submodules
{% endhighlight %}
> This is the same as: git pull + submodule update

Upgrade specific submodule to last commit
: {% highlight sh %}
$ cd bundle/<plugin>
$ git pull origin master
{% endhighlight %}

Upgrade all submodules of the current repo to their last commit
: {% highlight sh %}
$ git submodule foreach git pull origin master
{% endhighlight %}

---

# Workflows GIT

## Workflow centralizado

> El workflow centralizado utiliza una única rama, `master`, para trabajar en local. El código se actualizará sobre nuestra propia rama de trabajo mediante `git pull`.

> Al hacer `git pull` sobre `master` nos encontraremos con 3 posibles escenarios:

### I. Se realiza `pull` sin problemas

> Esto sucede cuando no existen nuevos commits en remoto, o no hay commits sin publicar en local.

> En ese último caso, `git pull` hará `fast-forward` siempre que los cambios del `working tree` no coincidan con los cambios de remoto (de lo contrario no se efectuaría el pull y se mostraría una advertencia (ver escenario II)

> En este caso publicar nuestros commits locales es tan simple como:

1) Añadir ficheros al índice para poder hacer commit:
: ```git add . [--all]``` o ```git add file1 [file2] [file3] [...]```

2) Hacer commit de los ficheros que hayamos añadido al índice:
: ```git commit```

3) Publicar los cambios en remoto:
: ```git push```

### II. No es posible realizar `pull`

Para poder hacer `pull` deberemos antes limpiar el índice y el working tree:
: 
    * **opción a**: ```git add . [-all]``` + ```git commit```
    * **opción b**: ```git stash```

> Después de realizar una de las dos acciones anteriores deberemos volver a hacer `git pull` y mergear los cambios de remoto (ver escenario III)

### III. Se ejecuta merge (o rebase) para mezclar los cambios de remoto con los de nuestra rama local

En este punto nos encontramos con 2 posibles escenarios:
: 
    * ***No hay conflicto.*** Automerge commit (o si utilizamos el parámetro ```--rebase``` los nuevos commits quedan simplemente añadidos al final)
    * ***Hay conflicto.*** Resolvemos con ```git mergetool``` y ejecutamos ```git commit``` (o ```git rebase --continue```, de haber usado el parámetro ```--rebase```)

De haber ejecutado ```git stash``` anteriormente podremos recuperar el stash guardado con:
: ```git stash apply```

> Si no queremos todos los cambios del stash, podremos hacer checkout (o diff) de los ficheros que no queramos después de aplicar el stash.

> Después de haber finalizado el merge correctamente podremos continuar con la publicación de cambios en remoto:

1) Comprobar de nuevo si se han producido cambios en remoto mientras hacíamos merge:
: ```git pull```

2) Publicar nuestros commits locales:
: ```git push```

> Todas las situaciones vistas anteriormente no son sólo aplicables a `master` y a un *workflow centralizado*, sino a cualquier tipo de rama y workflow (como el *feature branch workflow*, visto a continuación)

<br />

## Feature Branch Workflow

> El objetivo de este workflow es que la rama `master` siempre esté a punto para obtener o publicar código.

> Además la rama `master` nunca debe tener código "inestable". El código en estado de desarrollo se encontrará en ramas *feature* con nombres descriptivos, que serán validadas antes de subirse a la rama pública `master`, tras realizarse un *pull request*.

> El siguiente workflow sólo prevee hacer merge en el momento de la integración de la rama `feature` con la rama `master`, en los demás casos se ha optado por hacer rebase para no ensuciar el historial de commits.

### Configuración inicial (pull con rebase)

Configurar git para hacer rebase en lugar de merge al hacer pull
: {% highlight sh %}
    $ git config --global branch.master.rebase yes
    # también podemos configurarlo para todas las ramas
    $ git config --global branch.autosetuprebase always
{% endhighlight %}

### Fases del workflow

> * Creación de la rama `feature`, correspondiente a 1 *historia*
* Trabajar con rama privada `feature`, 1 commit corresponde a 1 *tarea*
* Hacer pública la rama `feature`
* Trabajar en equipo con la rama pública
* Petición de code review (*pull request*)
* Deploy en `master` cuando se acepte el código como válido finalmente

Crear rama `feature` y publicarla en remoto
: {% highlight sh %}
    $ git checkout -b feature master
    $ git push -u origin feature
{% endhighlight %}

Comitear (opcionalmente, editar el historial de commits de la rama con `rebase -i`)
: {% highlight sh %}
    $ git add .; git commit -m 'primer commit'; # ...
    # podemos hacer rebase -i hasta la base de la rama
    $ git rebase -i `git merge-base feature master`
{% endhighlight %}

> ***Únicamente se debe hacer `rebase -i` de commits que no hayan sido publicados.*** 

*Pull request* (petición de code review antes de integrar la rama en `master`)
: {% highlight sh %}
    $ git checkout feature
    $ git push origin feature
    # se puede crear hook que envíe mail con el nombre del feature a validar
{% endhighlight %}

Code review: ver cambios introducidos en la rama `feature` respecto a `master`
: {% highlight sh %}
    $ git checkout feature
    $ git difftool `git merge-base feature master`
{% endhighlight %}

Deploy de la rama `feature` a `master` (*merge commit* forzado para no perder la trazabilidad de la rama)
: {% highlight sh %}
    $ git checkout master
    $ git pull
    # el parámetro --no-ff fuerza a que se cree un merge commit en master
    $ git merge --no-ff feature
    $ git branch -d feature
    $ git push
{% endhighlight %}

### Propagación de cambios entre ramas

Propagar último commit de una rama a otra
: {% highlight sh %}
    # después de hacer commit en master (por ejemplo)
    $ git checkout feature
    $ git cherry-pick master
{% endhighlight %}

Propagar commit mediante hash de una rama a otra
: {% highlight sh %}
    $ git checkout feature
    $ git cherry-pick <hash_commit>
{% endhighlight %}

Propagar cambios de `master` a `feature` (rebase)
: {% highlight sh %}
    # primero actualizamos la rama master
    $ git checkout master
    $ git pull
    # propagamos los cambios a feature
    $ git checkout feature
    $ git rebase master
    # opcional: podemos elegir que cambios de master queremos en nuestra rama 
    $ git rebase -i
{% endhighlight %}

Obtener directamente cambios desde origin/master (remoto)
: {% highlight sh %}
    $ git checkout feature
    $ git pull origin master
{% endhighlight %}

Reintegrar en `master` los cambios de una rama (ver advertencia abajo)
: {% highlight sh %}
    # obtenemos en feature los cambios de master
    $ git checkout feature
    $ git rebase master
    # obtenemos en master todos los cambios de feature
    $ git checkout master
    $ git merge feature # fast-forward merge
    $ git branch -d feature
{% endhighlight %}

> ***Al realizar el merge fast forward se pierde la trazabilidad de la rama que se ha integrado: `master` absorbe todos los commits que pertenecían a la rama y no se añade ningún merge commit que indique fusión de ramas*** 
