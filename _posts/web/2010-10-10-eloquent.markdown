---
layout: post
title:  "Eloquent ORM"
permalink:  "eloquent-orm"
date:   2015-01-02 16:30:15
category: WebDev
tags: Laravel
---

# Artisan

Create model and generate migrations
: ~~~php
    php artisan make:model User -m
~~~

# Collection

Collection methods
: ~~~php
    // get() returns eloquent collection that extends the base collection 
    $users = App\User::where('active', 1)->get();

    // collection methods are chainable
    $names = $users->reject(function ($user) {
        return $user->active === false;
    })
    ->map(function ($user) {
        return $user->name;
    });
~~~

> [Base collection](https://laravel.com/docs/5.5/collections) (Illuminate\Support\Collection)

> [Eloquent collection](https://laravel.com/docs/5.5/eloquent-collections) (Illuminate\Database\Eloquent\Collection)

> Collection [available methods](https://laravel.com/docs/5.5/collections#available-methods)

# Reducing memory usage

Chunk, reduces memory usage executing multiple querys (one for each chunk)
: ~~~php
    Flight::chunk(200, function ($flights) {
    foreach ($flights as $flight) {
        //
    }
});
~~~

Cursor, reduces memory usage executing a single query
: ~~~php
    foreach (Flight::where('foo', 'bar')->cursor() as $flight) {
        //
    }
~~~

# Fetching results

Find and first methods, no need to call get()
: ~~~php
    // Retrieve a model by its primary key...
    $flight = App\Flight::find(1);
    $flights = App\Flight::find([1, 2, 3]);

    // Retrieve the first model matching the query constraints...
    $flight = App\Flight::where('active', 1)->first();
~~~

Getting exceptions or scalar values, not collections
: ~~~php
    // return 404 exception instead of null
    $model = App\Flight::findOrFail(1);
    $model = App\Flight::where('legs', '>', 100)->firstOrFail();

    // retrieve scalar value
    $count = App\Flight::where('active', 1)->count();
    $max = App\Flight::where('active', 1)->max('price');
~~~

# Inserting data

Inserting single register
: ~~~php
    $flight = new Flight;
    $flight->name = $request->name;
    $flight->save();
~~~

Preparing for mass assignment
: ~~~php
    // First we need to set the fillable OR guarded attributes (exclusive OR)
    protected $fillable = ['name'];
    protected $guarded = ['price'];
    // OR set all attributes mass asignable
    protected $guarded = [];
~~~

Static creation
: ~~~php
    $flight = App\Flight::create(['name' => 'Flight 10']);
~~~

Creating with existing model 
: ~~~php
    $flight->fill(['name' => 'Flight 22']);
~~~

Insert / update
: ~~~php
    // Retrieve flight by name, or create it if it doesn't exist...
    $flight = App\Flight::firstOrCreate(['name' => 'Flight 10']);

    // Retrieve flight by name, or create it with the name and delayed attributes...
    $flight = App\Flight::firstOrCreate(
        ['name' => 'Flight 10'], ['delayed' => 1]
    );

    // If there's a flight from Oakland to San Diego, set the price to $99.
    // If no matching model exists, create one.
    $flight = App\Flight::updateOrCreate(
        ['departure' => 'Oakland', 'destination' => 'San Diego'],
        ['price' => 99]

    // Retrieve by name, or instantiate...
    $flight = App\Flight::firstOrNew(['name' => 'Flight 10']);

    // Retrieve by name, or instantiate with the name and delayed attributes...
    $flight = App\Flight::firstOrNew(
        ['name' => 'Flight 10'], ['delayed' => 1]
    );
~~~

> firstOrNew() requires to call save() to persist

# Updating data

Update single register
: ~~~php
    $flight = App\Flight::find(1);
    $flight->name = 'New Flight Name';
    $flight->save();
~~~

Mass update
: ~~~php
    App\Flight::where('active', 1)
    ->where('destination', 'San Diego')
    ->update(['delayed' => 1]);
~~~

> On a mass update models are not retrieved and the saved and updated model events will not be fired

# Deleting data

Retrieving the model
: ~~~php
    $flight = App\Flight::find(1);
    $flight->delete();
~~~

Static call (without retrieving model)
: ~~~php
    App\Flight::destroy(1);
    App\Flight::destroy([1, 2, 3]);
    App\Flight::destroy(1, 2, 3);
~~~

Delete query
: ~~~php
    $deletedRows = App\Flight::where('active', 0)->delete();
~~~

> On delete query models are not retrieved and the saved and updated model events will not be fired


# Debugging

Save log with generated sql code
: ~~~php
    \Log::info(\DB::getQueryLog());
~~~


# External resources

[<i class="fas fa-external-link-alt"></i> Laravel ORM/builder quick guide](http://desarrollowebtutorial.com/laravel-eloquent-orm-query-builder-consultas-sql/)

[<i class="fas fa-external-link-alt"></i> Laravel collection methods](https://laraveldaily.com/10-less-known-but-awesome-laravel-collections-methods/)

[<i class="fas fa-external-link-alt"></i> Laravel schema generator](http://www.laravelsd.com/)

