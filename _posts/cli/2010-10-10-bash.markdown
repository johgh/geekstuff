---
layout: post
title:  "Shell-scripting snippets"
permalink:  "shellscripting"
date:   2015-01-02 16:30:15
category: Terminal
tags: Sysadmin
---
# Snippets

Save and display any value on a variable (including \n \0)
: ~~~bash
$ var="`ls -1`\n"
$ echo -e $var
~~~

Parse file with delim into array
: ~~~bash
IN="bla@some.com;john@home.com"
while IFS=';' read -ra ADDR; do
        for i in "${ADDR[@]}"; do
            # process "$i"
        done
    done <<< "$IN"
~~~

Ternary logic: test empty directory
: ~~~bash
[ "$(ls -A /path/to/directory)" ] && echo "Not Empty" || echo "Empty"
~~~

Bash flags
: ~~~bash
echo $@
shift
if [ $# -ne 0 ]; then ...
if [ $? -ne 0 ]; then ...
if [ -f "$NEWFILE" ] then ...
if [ -d /media/11C0-0BF1/ ]
if [ ! -z $empty ]
~~~

Constants (-r), arrays (-a)
: ~~~bash
declare -a -r LANGLST=( eng spa fre ger ita)
~~~

Iterate through array
: ~~~bash
for opt in ${LANGLST[@]}; do
~~~

Read standard input
: ~~~bash
read -n1 -p "Add language [$opt] [y/N]?"; echo ""
if [ $REPLY = "y" -o $REPLY = "Y" ]
~~~

Get number of elements in the array
: ~~~bash
ELEMENTS=${#ARRAY[@]}
~~~

For loop
: ~~~bash
for (( i=0;i<$ELEMENTS;i++)); do echo ${ARRAY[${i}]}; done 
~~~

While with pipe
: ~~~bash
ls | while read var; do echo $var; done;
~~~
> only useful if we don't care about the values of the loop variables after exiting the loop

While loop + workaround pipe parallel process
: ~~~bash
while read i; do echo "$i"; done < <(ls)  #this is called bash process substitution
~~~
> useful when some post-processing is needed after the loop

Diff of 2 dirs with bash process substitution (see above)
: ~~~bash
diff <(ls $first_directory) <(ls $second_directory)
~~~

Evaluating math expressions
: ~~~bash
(( index++ ))
(( 8 + 4 ))
(( 5 == 5 ))
~~~

[[ ]] if there are ANDS
: ~~~bash
if [[ $FLAG_INPUT == "0" && $FLAG_STDIN == "1" ]]
~~~

Ask password (-s: silent)
: ~~~bash
    read -s -n 1 -p "" option;
    if [ $? -eq 0 ]; then
~~~

Some awk and sed
: ~~~bash
newname="`echo "$1" | sed 's/\[\+[^\[]*\]\+\ *//g' | sed 's/\ [\.]*/\./g' | sed 's/^[_-=\.]*//g'`"
title=`cat /tmp/filminfo.tmp | grep title | awk -F"title: " '{print $2}' | sed 's/\ /./g'`
~~~

Getopts
: ~~~bash
usage() { echo "Usage: $0 [-s <45|90>] [-p <string>]" 1>&2; exit 1; }
while getopts ":s:p:" o; do
    case "${o}" in
        s)
            s=${OPTARG}
            ((s == 45 || s == 90)) || usage
            ;;
        p)
            p=${OPTARG}
            ;;
        *)
            usage
            ;;
    esac
done
shift $((OPTIND-1))
if [ -z "${s}" ] || [ -z "${p}" ]; then
    usage
fi
echo "s = ${s}"
echo "p = ${p}"
~~~

Rsync (n=simulation)
: ~~~bash
rsync -rltDvun --exclude='*.flac' $orig_path $dest_path/MÃºsica | tee -a $log_file
~~~

Useful commands for shell scripting
: ~~~bash
basename, dirname, wc -l, tail -n+2, . (include)
~~~

# Resources

> For complete shell scripting reference go [here](http://www.tldp.org/LDP/abs/html/)

> Bash and shell scripting guides [here](http://wiki.bash-hackers.org)

