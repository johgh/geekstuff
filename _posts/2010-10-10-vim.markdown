---
layout: post
title:  "Vim"
permalink:  "vim"
date:   2015-07-08 16:30:15
category: Reference
tags: Vim
---
<!--
/* TODO:
root plugin & grepproject?
old: ft motions, files (ctrlp + root plugin + nerdtree), falta explicar search + /e /C parametros
*/
-->


# Operator pending mode
Operator pending mode command
: `counter` + `operator` + `text_object` or `motion`

## Words

### Builtin Words

#### Standard Vim words
A word can be of any of these:

* a sequence of letters, digits and underscores
* a sequence of any other char not being letters, digits, underscores or blank characters (space, tab, end of line)
* an empty line

> Motions
: 
    `w` go to the next word<br />
    `e` go to the end of the currend word<br />
    `b` go to the previous word<br />
    `ge` go to the end of the previous word<br />

#### WORDS
A WORD can be of any of these:

* a sequence of non-blank characters, separated with blank characters
* an empty line

> Motions
: 
    `W` go to the next WORD<br />
    `E` go to the end of the currend WORD<br />
    `B` go to the previous WORD<br />
    `gE` go to the end of the previous WORD<br />


### Plugin Words

#### Smart-words
A smart-word is a sequence of letters, digits and underscores

> Motion mappings
: 
    map `key_to_map` \<Plug\>(smartword-w)<br />
    map `key_to_map` \<Plug\>(smartword-b)<br />
    map `key_to_map` \<Plug\>(smartword-e)<br />
    map `key_to_map` \<Plug\>(smartword-ge)<br />

#### CamelCaseMotion
A CamelCaseMotion can be any of these:

* a standard vim word motion<br />
* the start of a segment of camelCased letters or an underscore<br />

> Motions
: 
    `<Leader>w` go to the next camelCase word<br />
    `<Leader>b`  go to the previous camelCase word<br />

## Word motions
> All motion commands have a range of action starting at the current cursor position

`dw` `yw` `vw`
: delete/yank/visual selection including adjacent space

`de` `ye` `ve`
: delete/yank/visual word without adjacent space

`cf<space>`
: change including adjacent space

`cw` `ysw'`
: change without adjacent space / surround plugin

> all `word` motions listed above can be used with all type of words described aboved

## Text objects
> All text object commands have a range of action that takes the entire current object (the current cursor position determines the object)

`a` + `text_object`
: <i>A object</i>. Object including surrounding spaces

`i` + `text_object`
: <i>Inner object</i>. Object without surrounding spaces

### Word-based text-objects

`daw` `yaw` `vaw`
: delete/yank/visual including adjacent space

`diw` `yiw` `viw`
: delete/yank/visual word without adjacent space

`caw`
: change including adjacent space

`ciw` `ysiw'`
: change without adjacent space / surround plugin

### More builtin vim text objects
`s` (sentence)
: From dot to dot (or paragraph if there aren't no dots). Motion equivalent: `(` `)`

`p` (paragraph)
: Paragraph. From blank line to blank line. Motion equivalent: `{` `}`

> Ipmotion plugin changes the boundaries of a paragraph adding lines with only white spaces also as a boundary of paragraph (motion and text object)

`)`|`b` (parentheses)
: Parentheses block. <i>Matchit</i> provides finding matching parentheses with %, but only at same position

`}`|`B` (braces)
: Braces block. <i>Matchit</i> provides finding matching braces with %, but only at same position

`t` (tag block)
: block between the matching tags

`>` (single tag)
: block between brackets of a single tag

> see more builtin text objects [here](http://blog.carbonfive.com/2011/10/17/vim-text-objects-the-definitive-guide/) or in vim manual

### Plugin text objects
`j` (vim-textobj-brace)
: for the closest region between any of () [] or {}

`l` (vim-textobj-line)
: for the current line

`a` (argtextobj)
: for an argument to a function

`q` (vim-textobj-quotes)
: for the closest pairs of quotes of any type

`e` (vim-textobj-entire)
: for the entire region of the current buffer

`v` (vim-textobj-variable-segment)
: for a region between either underscore or camelCaseVariables (equivalent to camelCase motion)

`i`|`I` (vim-textobj-indent)
: ai/ii for a block of similarly indented lines / aI/iI for a block of lines with the same indentation

`c` (vim-textobj-comment)
: for a comment

`f`|`F` (vim-textobj-function)
: af/if and aF/iF for a function / extensible for any language

`_` (vim-textobj-underscore)
: for a region between _s such as bar in foo_bar_baz

`x` (vim-textobj-xmlattr)
: for XML/HTML attributes

`f`{x} (vim-textobj-between)
: for a region between any {char}

`z` (vim-textobj-fold)
: for a block of folded lines

# Normal mode plugins
> Some of the mappings under this section need to be [customized](https://github.com/johgh/vim/blob/master/.vimrc)

## Surround
add surrounding
: `ys` + `text_object/motion` + `surrounding_char`

add surrounding on a line of its own, indented
: `yS` + `text_object/motion` + `surrounding_char`

change/delete surrounding
: `[c/d]s` + `target_char` + `surrounding_char`

add surrounding in visual mode, blockwise (add on each line), linewise (add on a line of its own)
: `[v/V][...]S` + `surrounding_char`

> where surrounding_char could be any char, an html tag, or an open/close block char (in this case open block char `({<` adds/deletes spaces)

## Commentary
`gc+motion/text_object`
: Comment selected text

`visual+gc`
: Comment selected text

`gcc`
: Comment current line

`gcu`
: uncomment contiguous commented lines under cursor

## Exchange
`cx+motion/text_object`
: Select/exchange text

`cxx`
: Select/exchange current line

`cxc`
: Clear current exchange selection

## DelimitMate
`<Leader>,`
: Jump delimiter

`<Leader>.`
: Jump all delimiters

## Utilsnips
`A-e`
: expand current snippet

`A-n`
: go to next snippet

`A-p`
: go to previous snippet

## PhpDocumentor (PDV)
`<leader>c`
: call PDV snippet to doc function

## Abolish
`crm`
: Convert to MixedCase

`crc`
: Convert to camelCase

`crs`
: Convert to snake_case

`cru`
: Convert to UPPER_CASE

#Command Mode

## Syntax

`:[range]command {argument/s}`

> view complete list at `:h ex-cmd-index`

Range Syntax
: `{start}[+n|-n],{end}[+n|-n]`

> where {start} and {end} are one of the folowing:
: 
    `/pattern/` Pattern to match<br />
    `1` First line of the file<br />
    `$` Last line of the file<br />
    `0` Virtual line above first line of the file<br />
    `.` Line where the cursor is placed<br />
    `'m` Line containing mark m<br />
    `'<` Start of visual selection<br />
    `'>` End of visual selection<br />
    `%` The entire file (shorthand for :1,$ )<br />

## Text Editing With Ex Commands

> If no range is specified, the below ex Commands take the current line as its range (`.`)

> The global command is an exception, which takes the entire file as its range (`%`)

Delete specified lines [into register x]
: `:[range]delete [x]`

Yank specified lines [into register x]
: `:[range]yank [x]`

Put the text from register x after the specified line
: `:[line]put [x]`

Copy the specified lines to below the line specified by {address}
: `:[range]copy {address}`

Move the specified lines to below the line specified by {address}
: `:[range]move {address}`

Join the specified lines
: `:[range]join`

Execute Normal mode {commands} on each specified line
: `:[range]normal {commands}`

> Normal ex command allow the use of normal mode commands with a range

> Some useful mappings that make use of `normal`
: {% highlight vim %}
" Allow using the repeat operator with a visual selection
vnoremap . :normal .<CR>
" Allow using macro 'a' with visual selection
vnoremap @@ :normal @@<CR>
vnoremap @a :normal @a<CR>
{% endhighlight %}

Replace {pattern} with {string} on range
: `:[range]s[ubstitute]/{pattern}/{replacement}/[flags]`

> where replacement string can contain :h sub-replace-special
: 
    `\r` Insert a carriage return<br />
    `\t` Insert a tab character<br />
    `\\` Insert a single backslash<br />
    `\1` Insert the first submatch<br />
    `\2` Insert the second submatch (and so on, up to \9 )<br />
    `\0` Insert the entire matched pattern<br />
    `&` Insert the entire matched pattern<br />
    `~` Use {string} from the previous invocation of :substitute<br />
    `\={Vim script}` Evaluate {Vim script} expression; use result as replacement {string}<br />


Execute the Ex command [cmd] on all specified lines where the {pattern} matches
: `:[range][v]g[lobal]/{pattern}/[cmd]`

> vglobal executes the ex command on all unmatched lines

> the command can also has its own range as in the example below:
: 
    `:g/{/ .+1,/}/-1 sort`

Quick abbreviation (available through Abolish plugin)
: `:%Abolish {despa,sepe}rat{e,es,ed,ing,ely,ion,ions,or}  {despe,sepa}rat{}`

Quick substitution (available through Abolish plugin)
: `:%S[ubvert]/child{,ren}/adult{,s}/g`

> For swapping two words you can do:
`:%S/{man,dog}/{dog,man}/g`

> Both `Subvert` and `Abolish` commands take care of case sensitive variants, so in the above command 'man', 'Man' and 'MAN' would be swapped with its correspondent counterparts

## Command Line Edition

Custom mappings for quick navigation in command line (to set in .vimrc)
: 
    `cnoremap <C-n> <down>`<br />
    `cnoremap <C-p> <up>`<br />
    `cnoremap <C-b>  <Home>`<br />
    `cnoremap <C-e>  <End>`<br />
    `cnoremap <M-j>  <Left>`<br />
    `cnoremap <M-k>  <Right>`<br />
    `cnoremap <M-b>  <S-Left>`<br />
    `cnoremap <M-f>  <S-Right>`<br />
    `cnoremap <C-k>  <S-right><C-w>`<br />

Search or replace current expression on search register `@/`
: `/` or `s//{replacement}/g`

Open command window from normal mode
: `q:` or `q/`

Open command window from command line mantaining current command
: `<C-f>`

Put word on command line from under current buffer cursor
: `<C-r><C-w>`

Custom command line expansion of current file path (to set in .vimrc)
: `cnoremap <expr> ~~ getcmdtype() == ':' ? expand('%:h').'/' : '~~'`

## Repeat last command
Repeat last Ex command
: `@:`

Repeat last executed command
: `@@`

> The above is useful to repeat commands like `cnext`, to go back jump with `C-o`

Repeat last substitution with Ex command
: `:{range}&&`

Repeat last substitution in normal and visual mode
: 
    `&`

> mapings below are required to perform subsitution with same flags as the original with `&`
: {% highlight vim %}
    nnoremap & :&&<CR>
    xnoremap & :&&<CR>
{% endhighlight %}

Repeat last substitution on the entire file in normal mode
: `g&`

# Vimdiff

## 2-way diff
]c
: next difference

[c
: previous difference

do
: diff obtain

dp
: diff put

zm
: more folding level

zr
: reduce folding level

:diffupdate
: re-scan the files for differences

## Fugitive diff (plugin)
dp
: put the change from the current selected parent into the working copy

:diffget //2
: fetches the hunk from the target parent (on the left)

:diffget //3
: fetches the hunk from the merge parent (on the right)

:only
: close all windows apart from the current one

:Gwrite[!]
: write the current file to the index

# Buffer and window management

## Buffers

Edit buffer in the buffer list
: `:b <tab> `

Edit first buffer
: `:bfirst`

Edit last buffer
: `:blast`

Edit next buffer
: `:bn`

Edit previous buffer
: `:bp`

Show all buffers, including unnamed ones
: `ls!`

Edit buffer N (including unnamed buffers)
: `:bN`

Edit alternate buffer (previous buffer visited)
: `:b#`

Delete/wipe current buffer (or specified one)
: `:bd <tab>` / `:bw <tab>`

Edit file
: `:e <tab>`

Reload current file
: `:e!`

Edit new file
: `:enew`

Execute macro on register A on each opened buffer
: `tags execute "normal! @a"`

Save all buffers
: `:wa`

## Windows

Create vertical window
: `<C-w> v`

Create horizontal window
: `<C-w> s`

Show only buffer on current window
: `:only`

Unhide buffers (create window for every buffer)
: `:unhide`

Quit all windows
: `:qa`

## Ctrl-space (plugin)

### Buffers / Files

enter buffer list mode (default mode)
: `<C-space>`

> all commands below only work after entering `<C-space>` mode, `q` exits

> buffer list submodes
: 
    `a` / `A` all tabs mode / in search mode <br />
    `z` zoom (preview mode)<br />
    `backspace` return to single (current tab) mode<br />
    `*` visible mode<br />

> visible mode is useful to jump to windows easily
: 
    `tab` jump to window<br />
    `S-tab` jump to window, continue in <C-space> mode<br />

> buffer list actions
: 
    `x` close the window containig selected buffer<br />
    `x` close the window containig selected buffer<br />
    `X` close all the windows except the one containig selected buffer<br />
    `d` delete selected buffer<br />
    `D` delete all noname buffers<br />
    `f` delete selected buffer only from current tab<br />
    `g` / `G` go to next/previous selected buffer tab (really useful when in "all tabs" mode)<br />
    `e` open new file from selected directory buffer<br />
    `<ctrl-t>` starts blank tab (same as `:tabe`)<br />
    `C` close current tab<br />
    `=` rename current tab<br />

enter current project files list mode / in search mode
: `o` / `O`

### Tabs

enter tabs list mode / in search mode
: `l` / `L`

> tab actions
: 
    `t` starts blank tab (same as `:tabe`)<br />
    `c` close selected tab<br />
    `=` rename selected tab<br />

### Workspaces (sessions)

enter workspace mode
: `w`

> Session actions
: 
    `<c-s>` save workspace<br />
    `<c-l>` load last session<br />
    `a` append selected workspace instead of load a new one<br />
    `N` close all buffers, start from blank workspace<br />

### Bookmarks

enter bookmark project mode
: `b`

> `a` saves path of project (same as if we cd on the root of a project). A project has its own workspaces and file list


### Common actions
enter search mode
: `/`

previous / next search
: `<c-p>` / `<c-n>`

go back. return from search mode (if in search mode) / return to buffer list mode
: `<backspace>`

up / down / top / bottom (in all list modes)
: `k` / `j` / `K` / `J`

quit Vim
: `Q`

> buffer and tab mode only
: 
    `-` / `+` move tab left/right<br />
    `[` / `]` go to tab left/right<br />
    
    
> buffer and file list mode only
: 
    `<CR> / <space>` open selected buffer / and continue in mode<br />
    `v` / `V` open in vertical split window / and continue in mode<br />
    `s` / `S` open in horizontal split window / and continue in mode<br />
    `t` / `T` open in new tab / and continue in mode<br />
    
    
# VIM quick reference

> This was copied from [here](http://tnerual.eriogerg.free.fr/vim.html). Go there for pdf format and more!

## Basic movement

<table>
<tr><td><code>h l k j</code></td><td>character left, right; line up, down</td></tr>
<tr><td><code>b w</code></td><td>word/token left, right</td></tr>
<tr><td><code>ge e</code></td><td>end of word/token left, right</td></tr>
<tr><td><code>&#123;&nbsp; &#125;</code></td><td>beginning of previous, next paragraph</td></tr>
<tr><td><code>( )</code></td><td>beginning of previous, next sentence</td></tr>
<tr><td><code>0 gm</code></td><td>beginning, middle of line</td></tr>
<tr><td><code>^&nbsp; $</code></td><td>first, last character of line</td></tr>
<tr><td><code><font color='red'><i>n</i></font>G <font color='red'><i>n</i></font>gg</code></td><td>line <font color='red'><i>n</i></font>, default the last, first</td></tr>
<tr><td><code><font color='red'><i>n</i></font>%</code></td><td>percentage <font color='red'><i>n</i></font> of the file <i>(<font color='red'><i>n</i></font> must be provided)</i></td></tr>
<tr><td><code><font color='red'><i>n|</i></font></code></td><td>column <font color='red'><i>n</i></font> of current line</td></tr>
<tr><td><code>%</code></td><td>match of next brace, bracket, comment, <tt>#define</tt></td></tr>
<tr><td><code><font color='red'><i>n</i></font>H <font color='red'><i>n</i></font>L</code></td><td>line <font color='red'><i>n</i></font> from start, bottom of window</td></tr>
<tr><td><code>M</code></td><td>middle line of window</td></tr>
</table><br />

## Insertion &amp; replace <font color='red'><i><font color='black'>&#8594;</font></i></font> insert mode

<table>
<tr><td><code>i a</code></td><td>insert before, after cursor</td></tr>
<tr><td><code>I A</code></td><td>insert at beginning, end of line</td></tr>
<tr><td><code>gI</code></td><td>insert text in first column</td></tr>
<tr><td><code>o O</code></td><td>open a new line below, above the current line</td></tr>
<tr><td><code>r<font color='red'><i>c</i></font></code></td><td>replace character under cursor with <font color='red'><i>c</i></font></td></tr>
<tr><td><code>gr<font color='red'><i>c</i></font></code></td><td>like <tt> r</tt>, but without affecting layout</td></tr>
<tr><td><code>R</code></td><td>replace characters starting at the cursor</td></tr>
<tr><td><code>gR</code></td><td>like <tt> R</tt>, but without affecting layout</td></tr>
<tr><td><code>c<font color='red'><i>m</i></font></code></td><td>change text of movement command <font color='red'><i>m</i></font></td></tr>
<tr><td><code>cc&nbsp;<font size='-1'>or</font> S</code></td><td>change current line</td></tr>
<tr><td><code>C</code></td><td>change to the end of line</td></tr>
<tr><td><code>s</code></td><td>change one character and insert</td></tr>
<tr><td><code>~</code></td><td>switch case and advance cursor</td></tr>
<tr><td><code>g~<font color='red'><i>m</i></font></code></td><td>switch case of movement command <font color='red'><i>m</i></font></td></tr>
<tr><td><code>gu<font color='red'><i>m</i></font> gU<font color='red'><i>m</i></font></code></td><td>lowercase, uppercase text of movement <font color='red'><i>m</i></font></td></tr>
<tr><td><code><font color='red'><i><</i></font><font color='red'><i>m</i></font> <font color='red'><i>></i></font><font color='red'><i>m</i></font></code></td><td>shift left, right text of movement <font color='red'><i>m</i></font></td></tr>
<tr><td><code><font color='red'><i>n</i></font><font color='red'><i><</i></font><font color='red'><i><</i></font> <font color='red'><i>n</i></font><font color='red'><i>></i></font><font color='red'><i>></i></font></code></td><td>shift <font color='red'><i>n</i></font> lines left, right</td></tr>
</table><br />

## Deletion

<table>
<tr><td><code>x X</code></td><td>delete character under, before cursor</td></tr>
<tr><td><code>d<font color='red'><i>m</i></font></code></td><td>delete text of movement command <font color='red'><i>m</i></font></td></tr>
<tr><td><code>dd D</code></td><td>delete current line, to the end of line</td></tr>
<tr><td><code>J gJ</code></td><td>join current line with next, without space</td></tr>
<tr><td><code>:<font color='red'><i>r</i></font>d<font size='+1'>&#8629;</font></code></td><td>delete range <font color='red'><i>r</i></font> lines</td></tr>
<tr><td><code>:<font color='red'><i>r</i></font>d<font color='red'><i>x</i></font><font size='+1'>&#8629;</font></code></td><td>delete range <font color='red'><i>r</i></font> lines into register <font color='red'><i>x</i></font></td></tr>
</table><br />

## Insert mode

<table>
<tr><td><code>^V<font color='red'><i>c</i></font> ^V<font color='red'><i>n</i></font></code></td><td>insert char <font color='red'><i>c</i></font> literally, decimal value <font color='red'><i>n</i></font></td></tr>
<tr><td><code>^A</code></td><td>insert previously inserted text</td></tr>
<tr><td><code>^@</code></td><td>same as <tt>^A</tt> and stop insert <font color='red'><i><font color='black'>&#8594;</font></i></font> command mode</td></tr>
<tr><td><code>^R<font color='red'><i>x</i></font> ^R^R<font color='red'><i>x</i></font></code></td><td>insert content of register <font color='red'><i>x</i></font>, literally</td></tr>
<tr><td><code>^N ^P</code></td><td>text completion before, after cursor</td></tr>
<tr><td><code>^W</code></td><td>delete word before cursor</td></tr>
<tr><td><code>^U</code></td><td>delete all inserted character in current line</td></tr>
<tr><td><code>^D ^T</code></td><td>shift left, right one shift width</td></tr>
<tr><td><code>^K<font color='red'><i>c<font size='-2'>1</font></i></font><font color='red'><i>c<font size='-2'>2</font></i></font>&nbsp;<font size='-1'>or</font> <font color='red'><i>c<font size='-2'>1</font></i></font><font size='+1'>&#8592;</font><font color='red'><i>c<font size='-2'>2</font></i></font></code></td><td>enter digraph <font color='red'><i>\c<font size='-2'>1</font>,c<font size='-2'>2</font>\</i></font></td></tr>
<tr><td><code>^O<font color='red'><i>c</i></font></code></td><td>execute <font color='red'><i>c</i></font> in temporary command mode</td></tr>
<tr><td><code>^X^E ^X^Y</code></td><td>scroll up, down</td></tr>
<tr><td><code><font size='-1' color='blue'>&lt;esc&gt;</font>&nbsp;<font size='-1'>or</font> ^[</code></td><td>abandon edition <font color='red'><i><font color='black'>&#8594;</font></i></font> command mode</td></tr>
</table><br />

## Copying

<table>
<tr><td><code>"<font color='red'><i>x</i></font></code></td><td>use register <font color='red'><i>x</i></font> for next delete, yank, put</td></tr>
<tr><td><code>:reg<font size='+1'>&#8629;</font></code></td><td>show the content of all registers</td></tr>
<tr><td><code>:reg <font color='red'><i>x</i></font><font size='+1'>&#8629;</font></code></td><td>show the content of registers <font color='red'><i>x</i></font></td></tr>
<tr><td><code>y<font color='red'><i>m</i></font></code></td><td>yank the text of movement command <font color='red'><i>m</i></font></td></tr>
<tr><td><code>yy&nbsp;<font size='-1'>or</font> Y</code></td><td>yank current line into register</td></tr>
<tr><td><code>p P</code></td><td>put register after, before cursor position</td></tr>
<tr><td><code>]p [p</code></td><td>like <tt> p</tt>, <tt> P</tt> with indent adjusted</td></tr>
<tr><td><code>gp gP</code></td><td>like <tt> p</tt>, <tt> P</tt> leaving cursor after new text</td></tr>
</table><br />

## Advanced insertion

<table>
<tr><td><code>g?<font color='red'><i>m</i></font></code></td><td>perform rot13 encoding on movement <font color='red'><i>m</i></font></td></tr>
<tr><td><code><font color='red'><i>n</i></font>^A <font color='red'><i>n</i></font>^X</code></td><td><font color='red'><i>+n</i></font>, <font color='red'><i>-n</i></font> to number under cursor</td></tr>
<tr><td><code>gq<font color='red'><i>m</i></font></code></td><td>format lines of movement <font color='red'><i>m</i></font> to fixed width</td></tr>
<tr><td><code>:<font color='red'><i>r</i></font>ce <font color='red'><i>w</i></font><font size='+1'>&#8629;</font></code></td><td>center lines in range <font color='red'><i>r</i></font> to width <font color='red'><i>w</i></font></td></tr>
<tr><td><code>:<font color='red'><i>r</i></font>le <font color='red'><i>i</i></font><font size='+1'>&#8629;</font></code></td><td>left align lines in range <font color='red'><i>r</i></font> with indent <font color='red'><i>i</i></font></td></tr>
<tr><td><code>:<font color='red'><i>r</i></font>ri <font color='red'><i>w</i></font><font size='+1'>&#8629;</font></code></td><td>right align lines in range <font color='red'><i>r</i></font> to width <font color='red'><i>w</i></font></td></tr>
<tr><td><code>!<font color='red'><i>m</i></font><font color='red'><i>c</i></font><font size='+1'>&#8629;</font></code></td><td>filter lines of movement <font color='red'><i>m</i></font> through command <font color='red'><i>c</i></font></td></tr>
<tr><td><code><font color='red'><i>n</i></font>!!<font color='red'><i>c</i></font><font size='+1'>&#8629;</font></code></td><td>filter <font color='red'><i>n</i></font> lines through command <font color='red'><i>c</i></font></td></tr>
<tr><td><code>:<font color='red'><i>r</i></font>!<font color='red'><i>c</i></font><font size='+1'>&#8629;</font></code></td><td>filter range <font color='red'><i>r</i></font> lines through command <font color='red'><i>c</i></font></td></tr>
</table><br />

## Visual mode

<table>
<tr><td><code>v V ^V</code></td><td>start/stop highlighting characters, lines, block</td></tr>
<tr><td><code>o</code></td><td>exchange cursor position with start of highlighting</td></tr>
<tr><td><code>gv</code></td><td>start highlighting on previous visual area</td></tr>
<tr><td><code>aw as ap</code></td><td>select a word, a sentence, a paragraph</td></tr>
<tr><td><code>ab aB</code></td><td>select a block ( ), a block <tt>&#123;</tt> <tt>&#125;</tt></td></tr>
</table><br />

## Undoing, repeating &amp; registers

<table>
<tr><td><code>u U</code></td><td>undo last command, restore last changed line</td></tr>
<tr><td><code>.&nbsp;&nbsp;^R</code></td><td>repeat last changes, redo last undo</td></tr>
<tr><td><code><font color='red'><i>n</i></font>.&nbsp; </code></td><td>repeat last changes with count replaced by <font color='red'><i>n</i></font></td></tr>
<tr><td><code>q<font color='red'><i>c</i></font> q<font color='red'><i>C</i></font></code></td><td>record, append typed characters in register <font color='red'><i>c</i></font></td></tr>
<tr><td><code>q</code></td><td>stop recording</td></tr>
<tr><td><code>@<font color='red'><i>c</i></font></code></td><td>execute the content of register <font color='red'><i>c</i></font></td></tr>
<tr><td><code>@@</code></td><td>repeat previous <tt> @</tt> command</td></tr>
<tr><td><code>:@<font color='red'><i>c</i></font><font size='+1'>&#8629;</font></code></td><td>execute register <font color='red'><i>c</i></font> as an <i> Ex</i> command</td></tr>
<tr><td><code>:<font color='red'><i>r</i></font>g/<font color='red'><i>p</i></font>/<font color='red'><i>c</i></font><font size='+1'>&#8629;</font></code></td><td>execute <i> Ex</i> command <font color='red'><i>c</i></font> on range <font color='red'><i>r</i></font></td></tr>
<tr><td></td><td>where pattern <font color='red'><i>p</i></font> matches</td></tr>
</table><br />

## Complex movement

<table>
<tr><td><code>- +</code></td><td>line up, down on first non-blank character</td></tr>
<tr><td><code>B W</code></td><td>space-separated word left, right</td></tr>
<tr><td><code>gE E</code></td><td>end of space-separated word left, right</td></tr>
<tr><td><code><font color='red'><i>n</i></font>_</code></td><td>down <font color='red'><i>n-1</i></font> line on first non-blank character</td></tr>
<tr><td><code>g0</code></td><td>beginning of <i> screen</i> line</td></tr>
<tr><td><code>g^&nbsp; g$</code></td><td>first, last character of <i> screen</i> line</td></tr>
<tr><td><code>gk gj</code></td><td><i> screen</i> line up, down</td></tr>
<tr><td><code>f<font color='red'><i>c</i></font> F<font color='red'><i>c</i></font></code></td><td>next, previous occurence of character <font color='red'><i>c</i></font></td></tr>
<tr><td><code>t<font color='red'><i>c</i></font> T<font color='red'><i>c</i></font></code></td><td>before next, previous occurence of <font color='red'><i>c</i></font></td></tr>
<tr><td><code>; ,</code></td><td>repeat last <tt> fFtT</tt>, in opposite direction</td></tr>
<tr><td><code>[[ ]]</code></td><td>start of section backward, forward</td></tr>
<tr><td><code>[] ][</code></td><td>end of section backward, forward</td></tr>
<tr><td><code>[( ])</code></td><td>unclosed (, ) backward, forward</td></tr>
<tr><td><code>[&#123;&nbsp; ]&#125;</code></td><td>unclosed <tt>&#123;</tt>, <tt>&#125;</tt> backward, forward</td></tr>
<tr><td><code>[m ]m</code></td><td>start of backward, forward <i> Java</i> method</td></tr>
<tr><td><code>[# ]#</code></td><td>unclosed <tt>#if</tt>, <tt>#else</tt>, <tt>#endif</tt> backward, forward</td></tr>
<tr><td><code>[* ]*</code></td><td>start, end of <tt>/* */</tt> backward, forward</td></tr>
</table><br />

## Search &amp; substitution

<table>
<tr><td><code>/<font color='red'><i>s</i></font><font size='+1'>&#8629;</font>&nbsp; ?<font color='red'><i>s</i></font><font size='+1'>&#8629;</font></code></td><td>search forward, backward for <font color='red'><i>s</i></font></td></tr>
<tr><td><code>/<font color='red'><i>s</i></font>/<font color='red'><i>o</i></font><font size='+1'>&#8629;</font>&nbsp; ?<font color='red'><i>s</i></font>?<font color='red'><i>o</i></font><font size='+1'>&#8629;</font></code></td><td>search fwd, bwd for <font color='red'><i>s</i></font> with offset <font color='red'><i>o</i></font></td></tr>
<tr><td><code>n&nbsp;<font size='-1'>or</font> /<font size='+1'>&#8629;</font></code></td><td>repeat forward last search</td></tr>
<tr><td><code>N&nbsp;<font size='-1'>or</font> ?<font size='+1'>&#8629;</font></code></td><td>repeat backward last search</td></tr>
<tr><td><code># *</code></td><td>search backward, forward for word under cursor</td></tr>
<tr><td><code>g# g*</code></td><td>same, but also find partial matches</td></tr>
<tr><td><code>gd gD</code></td><td>local, global definition of symbol under cursor</td></tr>
<tr><td><code>:<font color='red'><i>r</i></font>s/<font color='red'><i>f</i></font>/<font color='red'><i>t</i></font>/<font color='red'><i>x</i></font><font size='+1'>&#8629;</font></code></td><td>substitute <font color='red'><i>f</i></font> by <font color='red'><i>t</i></font> in range <font color='red'><i>r</i></font></td></tr>
<tr><td></td><td><font color='red'><i>x:</i></font> <tt> g</tt>-all occurrences, <tt> c</tt>-confirm changes</td></tr>
<tr><td><code>:<font color='red'><i>r</i></font>s <font color='red'><i>x</i></font><font size='+1'>&#8629;</font></code></td><td>repeat substitution with new <font color='red'><i>r</i></font> &amp; <font color='red'><i>x</i></font></td></tr>
</table><br />

## Special characters in search patterns

<table>
<tr><td><code>.&nbsp;&nbsp;&nbsp;^&nbsp; $</code></td><td>any single character, start, end of line</td></tr>
<tr><td><code>\<font color='red'><i><</i></font> \<font color='red'><i>></i></font></code></td><td>start, end of word</td></tr>
<tr><td><code>[<font color='red'><i>c<font size='-2'>1</font></i></font>-<font color='red'><i>c<font size='-2'>2</font></i></font>]</code></td><td>a single character in range <font color='red'><i>c<font size='-2'>1</font>..c<font size='-2'>2</font></i></font></td></tr>
<tr><td><code>[^<font color='red'><i>c<font size='-2'>1</font></i></font>-<font color='red'><i>c<font size='-2'>2</font></i></font>]</code></td><td>a single character not in range</td></tr>
<tr><td><code>\i \k \I \K</code></td><td>an identifier, keyword; excl. digits</td></tr>
<tr><td><code>\f \p \F \P</code></td><td>a file name, printable char.; excl. digits</td></tr>
<tr><td><code>\s \S</code></td><td>a white space, a non-white space</td></tr>
<tr><td><code>\e \t \r \b</code></td><td><font size='-1' color='blue'>&lt;esc&gt;</font>, <font size='-1' color='blue'>&lt;tab&gt;</font>, <font size='-1' color='blue'>&lt;<font size='+1'>&#8629;</font>&gt;</font>, <font size='-1' color='blue'>&lt;<font color='red'><i><font size='+1'>&#8592;</font></i></font>&gt;</font></td></tr>
<tr><td><code>\= * \+</code></td><td>match <font color='red'><i>0..1</i></font>, <font color='red'><i>0..<font size='+1'>&#8734;</font></i></font>, <font color='red'><i>1..<font size='+1'>&#8734;</font></i></font> of preceding atoms</td></tr>
<tr><td><code>\<font color='red'><i>|</i></font></code></td><td>separate two branches (<font color='red'><i>&nbsp;<font size='+1'>&#8801;</font></i></font> <i> or</i>)</td></tr>
<tr><td><code>\( \)</code></td><td>group patterns into an atom</td></tr>
<tr><td><code>\&amp; \<font color='red'><i>n</i></font></code></td><td>the whole matched pattern, <font color='red'><i>n<font size='-2'>th</font></i></font> <tt>()</tt> group</td></tr>
<tr><td><code>\u \l</code></td><td>next character made upper, lowercase</td></tr>
<tr><td><code>\c \C</code></td><td>ignore, match case on next pattern</td></tr>
</table><br />

## Offsets in search commands

<table>
<tr><td><code><font color='red'><i>n</i></font>&nbsp;<font size='-1'>or</font> +<font color='red'><i>n</i></font></code></td><td><font color='red'><i>n</i></font> line downward in column 1</td></tr>
<tr><td><code>-<font color='red'><i>n</i></font></code></td><td><font color='red'><i>n</i></font> line upward in column 1</td></tr>
<tr><td><code>e+<font color='red'><i>n</i></font> e-<font color='red'><i>n</i></font></code></td><td><font color='red'><i>n</i></font> characters right, left to end of match</td></tr>
<tr><td><code>s+<font color='red'><i>n</i></font> s-<font color='red'><i>n</i></font></code></td><td><font color='red'><i>n</i></font> characters right, left to start of match</td></tr>
<tr><td><code>;<font color='red'><i>sc</i></font></code></td><td>execute search command <font color='red'><i>sc</i></font> next</td></tr>
</table><br />

## Marks and motions

<table>
<tr><td><code>m<font color='red'><i>c</i></font></code></td><td>mark current position with mark <font color='red'><i>c&nbsp;<font size='+1'>&#8712;</font>[a..Z]</i></font></td></tr>
<tr><td><code>`<font color='red'><i>c</i></font> `<font color='red'><i>C</i></font></code></td><td>go to mark <font color='red'><i>c</i></font> in current, <font color='red'><i>C</i></font> in any file</td></tr>
<tr><td><code>`<font color='red'><i>0..9</i></font></code></td><td>go to last exit position</td></tr>
<tr><td><code>``  `"</code></td><td>go to position before jump, at last edit</td></tr>
<tr><td><code>`[ `]</code></td><td>go to start, end of previously operated text</td></tr>
<tr><td><code>:marks<font size='+1'>&#8629;</font></code></td><td>print the active marks list</td></tr>
<tr><td><code>:jumps<font size='+1'>&#8629;</font></code></td><td>print the jump list</td></tr>
<tr><td><code><font color='red'><i>n</i></font>^O</code></td><td>go to <font color='red'><i>n<font size='-2'>th</font></i></font> older position in jump list</td></tr>
<tr><td><code><font color='red'><i>n</i></font>^I</code></td><td>go to <font color='red'><i>n<font size='-2'>th</font></i></font> newer position in jump list</td></tr>
</table><br />

## Key mapping &amp; abbreviations

<table>
<tr><td><code>:map <font color='red'><i>c</i></font> <font color='red'><i>e</i></font><font size='+1'>&#8629;</font></code></td><td>map <font color='red'><i>c&nbsp;<font size='+1'>&#8614;</font> e</i></font> in normal &amp; visual mode</td></tr>
<tr><td><code>:map!&nbsp; <font color='red'><i>c</i></font> <font color='red'><i>e</i></font><font size='+1'>&#8629;</font></code></td><td>map <font color='red'><i>c&nbsp;<font size='+1'>&#8614;</font> e</i></font> in insert &amp; cmd-line mode</td></tr>
<tr><td><code>:unmap <font color='red'><i>c</i></font><font size='+1'>&#8629;</font>&nbsp; :unmap!&nbsp; <font color='red'><i>c</i></font><font size='+1'>&#8629;</font></code></td><td>remove mapping <font color='red'><i>c</i></font></td></tr>
<tr><td><code>:mk <font color='red'><i>f</i></font><font size='+1'>&#8629;</font></code></td><td>write current mappings, settings... to file <font color='red'><i>f</i></font></td></tr>
<tr><td><code>:ab <font color='red'><i>c</i></font> <font color='red'><i>e</i></font><font size='+1'>&#8629;</font></code></td><td>add abbreviation for <font color='red'><i>c&nbsp;<font size='+1'>&#8614;</font> e</i></font></td></tr>
<tr><td><code>:ab <font color='red'><i>c</i></font><font size='+1'>&#8629;</font></code></td><td>show abbreviations starting with <font color='red'><i>c</i></font></td></tr>
<tr><td><code>:una <font color='red'><i>c</i></font><font size='+1'>&#8629;</font></code></td><td>remove abbreviation <font color='red'><i>c</i></font></td></tr>
</table><br />

## Tags

<table>
<tr><td><code>:ta <font color='red'><i>t</i></font><font size='+1'>&#8629;</font></code></td><td>jump to tag <font color='red'><i>t</i></font></td></tr>
<tr><td><code>:<font color='red'><i>n</i></font>ta<font size='+1'>&#8629;</font></code></td><td>jump to <font color='red'><i>n<font size='-2'>th</font></i></font> newer tag in list</td></tr>
<tr><td><code>^] ^T</code></td><td>jump to the tag under cursor, return from tag</td></tr>
<tr><td><code>:ts <font color='red'><i>t</i></font><font size='+1'>&#8629;</font></code></td><td>list matching tags and select one for jump</td></tr>
<tr><td><code>:tj <font color='red'><i>t</i></font><font size='+1'>&#8629;</font></code></td><td>jump to tag or select one if multiple matches</td></tr>
<tr><td><code>:tags<font size='+1'>&#8629;</font></code></td><td>print tag list</td></tr>
<tr><td><code>:<font color='red'><i>n</i></font>po<font size='+1'>&#8629;</font>&nbsp; :<font color='red'><i>n</i></font>^T<font size='+1'>&#8629;</font></code></td><td>jump back from, to <font color='red'><i>n<font size='-2'>th</font></i></font> older tag</td></tr>
<tr><td><code>:tl<font size='+1'>&#8629;</font></code></td><td>jump to last matching tag</td></tr>
<tr><td><code>^W&#125;&nbsp; :pt <font color='red'><i>t</i></font><font size='+1'>&#8629;</font></code></td><td>preview tag under cursor, tag <font color='red'><i>t</i></font></td></tr>
<tr><td><code>^W]</code></td><td>split window and show tag under cursor</td></tr>
<tr><td><code>^Wz&nbsp;<font size='-1'>or</font> :pc<font size='+1'>&#8629;</font></code></td><td>close tag preview window</td></tr>
</table><br />

## Scrolling &amp; multi-windowing

<table>
<tr><td><code>^E ^Y</code></td><td>scroll line up, down</td></tr>
<tr><td><code>^D ^U</code></td><td>scroll half a page up, down</td></tr>
<tr><td><code>^F ^B</code></td><td>scroll page up, down</td></tr>
<tr><td><code>zt&nbsp;<font size='-1'>or</font> z<font size='+1'>&#8629;</font></code></td><td>set current line at top of window</td></tr>
<tr><td><code>zz&nbsp;<font size='-1'>or</font> z.&nbsp; </code></td><td>set current line at center of window</td></tr>
<tr><td><code>zb&nbsp;<font size='-1'>or</font> z-</code></td><td>set current line at bottom of window</td></tr>
<tr><td><code>zh zl</code></td><td>scroll one character to the right, left</td></tr>
<tr><td><code>zH zL</code></td><td>scroll half a screen to the right, left</td></tr>
<tr><td><code>^Ws&nbsp;<font size='-1'>or</font> :split<font size='+1'>&#8629;</font></code></td><td>split window in two</td></tr>
<tr><td><code>^Wn&nbsp;<font size='-1'>or</font> :new<font size='+1'>&#8629;</font></code></td><td>create new empty window</td></tr>
<tr><td><code>^Wo&nbsp;<font size='-1'>or</font> :on<font size='+1'>&#8629;</font></code></td><td>make current window one on screen</td></tr>
<tr><td><code>^Wj ^Wk</code></td><td>move to window below, above</td></tr>
<tr><td><code>^Ww ^W^W</code></td><td>move to window below, above (wrap)</td></tr>
</table><br />

## Ex commands (<font size='+1'>&#8629;</font>)

<table>
<tr><td><code>:e <font color='red'><i>f</i></font></code></td><td>edit file <font color='red'><i>f</i></font>, unless changes have been made</td></tr>
<tr><td><code>:e!&nbsp; <font color='red'><i>f</i></font></code></td><td>edit file <font color='red'><i>f</i></font> always (by default reload current)</td></tr>
<tr><td><code>:wn :wN</code></td><td>write file and edit next, previous one</td></tr>
<tr><td><code>:n :N</code></td><td>edit next, previous file in list</td></tr>
<tr><td><code>:<font color='red'><i>r</i></font>w</code></td><td>write range <font color='red'><i>r</i></font> to current file</td></tr>
<tr><td><code>:<font color='red'><i>r</i></font>w <font color='red'><i>f</i></font></code></td><td>write range <font color='red'><i>r</i></font> to file <font color='red'><i>f</i></font></td></tr>
<tr><td><code>:<font color='red'><i>r</i></font>w<font color='red'><i>></i></font><font color='red'><i>></i></font><font color='red'><i>f</i></font></code></td><td>append range <font color='red'><i>r</i></font> to file <font color='red'><i>f</i></font></td></tr>
<tr><td><code>:q :q!</code></td><td>quit and confirm, quit and discard changes</td></tr>
<tr><td><code>:wq&nbsp;<font size='-1'>or</font> :x&nbsp;<font size='-1'>or</font> ZZ</code></td><td>write to current file and exit</td></tr>
<tr><td><code><font size='-1' color='blue'>&lt;up&gt;</font> <font size='-1' color='blue'>&lt;down&gt;</font></code></td><td>recall commands starting with current</td></tr>
<tr><td><code>:r <font color='red'><i>f</i></font></code></td><td>insert content of file <font color='red'><i>f</i></font> below cursor</td></tr>
<tr><td><code>:r!&nbsp; <font color='red'><i>c</i></font></code></td><td>insert output of command <font color='red'><i>c</i></font> below cursor</td></tr>
<tr><td><code>:args</code></td><td>display the argument list</td></tr>
<tr><td><code>:<font color='red'><i>r</i></font>co&nbsp; <font color='red'><i>a</i></font> :<font color='red'><i>r</i></font>m&nbsp; <font color='red'><i>a</i></font></code></td><td>copy, move range <font color='red'><i>r</i></font> below line <font color='red'><i>a</i></font></td></tr>
</table><br />

## Ex ranges

<table>
<tr><td><code>, ;&nbsp; </code></td><td>separates two lines numbers, set to first line</td></tr>
<tr><td><code><font color='red'><i>n</i></font></code></td><td>an absolute line number <font color='red'><i>n</i></font></td></tr>
<tr><td><code>.&nbsp;&nbsp;&nbsp;$</code></td><td>the current line, the last line in file</td></tr>
<tr><td><code>% *</code></td><td>entire file, visual area</td></tr>
<tr><td><code>'<font color='red'><i>t</i></font></code></td><td>position of mark <font color='red'><i>t</i></font></td></tr>
<tr><td><code>/<font color='red'><i>p</i></font>/ ?<font color='red'><i>p</i></font>?</code></td><td>the next, previous line where <font color='red'><i>p</i></font> matches</td></tr>
<tr><td><code>+<font color='red'><i>n</i></font> -<font color='red'><i>n</i></font></code></td><td><font color='red'><i>+n</i></font>, <font color='red'><i>-n</i></font> to the preceding line number</td></tr>
</table><br />

## Folding

<table>
<tr><td><code>zf<font color='red'><i>m</i></font></code></td><td>create fold of movement <font color='red'><i>m</i></font></td></tr>
<tr><td><code>:<font color='red'><i>r</i></font>fo</code></td><td>create fold for range <font color='red'><i>r</i></font></td></tr>
<tr><td><code>zd zE</code></td><td>delete fold at cursor, all in window</td></tr>
<tr><td><code>zo zc zO zC</code></td><td>open, close one fold; recursively</td></tr>
<tr><td><code>[z ]z</code></td><td>move to start, end of current open fold</td></tr>
<tr><td><code>zj zk</code></td><td>move down, up to start, end of next fold</td></tr>
</table><br />

## Miscellaneous

<table>
<tr><td><code>:sh<font size='+1'>&#8629;</font>&nbsp; :!<font color='red'><i>c</i></font><font size='+1'>&#8629;</font></code></td><td>start shell, execute command <font color='red'><i>c</i></font> in shell</td></tr>
<tr><td><code>K</code></td><td>lookup keyword under cursor with <tt> man</tt></td></tr>
<tr><td><code>:make<font size='+1'>&#8629;</font></code></td><td>start <tt> make</tt>, read errors and jump to first</td></tr>
<tr><td><code>:cn<font size='+1'>&#8629;</font>&nbsp; :cp<font size='+1'>&#8629;</font></code></td><td>display the next, previous error</td></tr>
<tr><td><code>:cl<font size='+1'>&#8629;</font>&nbsp; :cf<font size='+1'>&#8629;</font></code></td><td>list all errors, read errors from file</td></tr>
<tr><td><code>^L ^G</code></td><td>redraw screen, show filename and position</td></tr>
<tr><td><code>g^G</code></td><td>show cursor column, line, and character position</td></tr>
<tr><td><code>ga</code></td><td>show ASCII value of character under cursor</td></tr>
<tr><td><code>gf</code></td><td>open file which filename is under cursor</td></tr>
<tr><td><code>:redir<font color='red'><i>></i></font><font color='red'><i>f</i></font><font size='+1'>&#8629;</font></code></td><td>redirect output to file <font color='red'><i>f</i></font></td></tr>
<tr><td><code>:mkview <font color='red'><i>[f]</i></font></code></td><td>save view configuration [to file <font color='red'><i>f</i></font>]</td></tr>
<tr><td><code>:loadview <font color='red'><i>[f]</i></font></code></td><td>load view configuration [from file <font color='red'><i>f</i></font>]</td></tr>
<tr><td><code>^@ ^K ^_&nbsp; \&nbsp; F<font color='red'><i>n</i></font> ^F<font color='red'><i>n</i></font></code></td><td>unmapped keys</td></tr>
</table>

<br />
