---
layout: blog
title:  "Git workflows"
permalink:  "git-workflows"
date:   2015-07-02 16:30:15
category: Blog
tags: Git
---
# Introducción

En este documento se explican las principales diferencias entre los dos principales workflows de trabajo de Git:

* el worflow `centralizado`, que tiene lugar en única rama
* el `descentralizado` (o *feature branch workflow*), en el que *cada desarrollo* tiene lugar en una rama distinta a master

> La comprensión de estos flujos requiere un buen conocimiento de los comandos `git merge`, `git pull [--rebase]` y `git rebase`. Se recomienda la lectura previa del funcionamiento del mecanismo de [merge](/git/#merge) y [rebase](/git/#rebase-y-pull-con-rebase).


# Descripción

## El workflow centralizado

> El workflow centralizado utiliza una única rama, `master`, para trabajar en local. El código se actualizará sobre nuestra propia rama de trabajo mediante `git pull`.

Al hacer `git pull` sobre `master` nos encontraremos con 3 posibles casos:

### 1. Se realiza `pull` sin problemas

> Esto sucede cuando no existen nuevos commits en remoto o no hay commits sin publicar en local. En ese último caso `git pull` hará `fast-forward` sin problemas siempre que los cambios del `Working Tree` no coincidan con los cambios de remoto.

Para publicar nuestros commits locales solo hay que hacer:

1) Añadir ficheros al `Index` para poder hacer commit:
: `git add . [--all]` o `git add file1 [file2] [file3] [...]`

2) Hacer commit de los ficheros que hayamos añadido al `Index`:
: `git commit`

3) Publicar los cambios en remoto:
: `git push`

### 2. No es posible realizar `pull`

> Esto puede ocurrir bien porque hay commits tanto en local como en remoto o bien porque hay cambios en los ficheros del `Working Tree` que coinciden con los nuevos commits de remoto.

En ambos casos para poder hacer `pull` deberemos limpiar primero el `Index` y el `Working Tree` mediante una de estas opciones:

a) Realizar `commit` para luego mergearlo con el remoto, al hacer `git pull` (ver [punto 3](#caso-3-se-ejecuta-merge-o-rebase-para-mezclar-los-cambios-de-remoto-con-los-de-nuestra-rama-local))
: 
`git add . --all` + `git commit`
    
b) Realizar `stash` para apartar nuestros cambios de local y que `git pull` continúe sin problemas (ver [punto 1](#caso-1-se-realiza-pull-sin-problemas))
: 
`git stash`

En este último caso, después de hacer `git pull` podremos volver a aplicar nuestros cambios locales con `git stash apply`

Si no queremos todos los cambios del stash podremos hacer `checkout` o `diff` de los ficheros que queramos posteriormente (`stash apply` solo actúa sobre el `Working Tree`)

### 3. Se ejecuta merge (o rebase) para mezclar los cambios de remoto con los de nuestra rama local

En este punto nos encontramos con 2 posibles casos:

No hay conflicto
: 
Se produce un automerge commit (o si utilizamos el parámetro `--rebase` los nuevos commits quedan simplemente añadidos al final)
    
Hay conflicto 
: Resolvemos con `git mergetool` y ejecutamos `git commit` (o `git rebase --continue`, de haber realizado `pull` con `rebase`)

> Al ejecutar `git rebase --continue` es posible que siga existiendo conflicto debido a que rebase soluciona los conflictos por etapas (ya que nuestro commit local debe ser desplazado paso a paso hasta el último commit de remoto). En tal caso deberemos volver al paso anterior para solucionar los sucesivos conflictos con `git mergetool` + `git rebase --continue`

Finalmente, comprobaremos que los conflictos estén resueltos y publicaremos los cambios:

Miramos que los conflictos estén marcados como resueltos:
: `git status`

> Si continúan apareciendo ficheros como 'unmerged', habiendo ya resuelto los conflictos, los podemos añadir con `git add` para marcarlos como resueltos manualmente

Publicamos los cambios:
: `git push`

> Si no se permite esta operación, deberemos volver a obtener los cambios de remoto y resolver los posibles conflictos: `git pull` + [resolución de conflictos] + `git push`

### Abortando git pull

Es posible volver al estado anterior antes de ejecutar `git pull` siempre y cuando no hayamos realizado todavía el merge commit o ejecutado `rebase --continue`:

Para abortar git pull con merge
: `git merge --abort`

Para abortar git pull con rebase
: `git rebase --abort`

Si ya hemos finalizado el pull, deberemos volver atrás mirando nuestro log local (git log -g):
: `git reset <commit_local>`

> Sin la opción `--hard`, `git reset` vuelve hasta el commit indicado dejando los cambios propios del commit en el `Working Tree`

<br />

---

## Feature Branch Workflow

El objetivo de este workflow es que la rama `master` siempre esté a punto para obtener o publicar código.

La rama `master` nunca debe tener código "inestable". El código en estado de desarrollo se encontrará en ramas *feature* con nombres descriptivos, que serán validadas antes de subirse a la rama pública `master`, tras realizarse un *pull request*.

### Configuración inicial (pull con rebase)

Configurar git para hacer rebase en lugar de merge al hacer `pull`
: ~~~sh
    $ git config --global branch.master.rebase yes
    # también podemos configurarlo para todas las ramas
    $ git config --global branch.autosetuprebase always
~~~

> Este paso es opcional pero nos permite mantener limpio el historial de commits al hacer pull, de forma que solo veamos `merge commit` en los puntos donde se realice la integración de la rama `feature` con `master`

### Fases del workflow

> * Creación de la rama `feature`, correspondiente a 1 *historia*
* Trabajar con rama privada `feature`, 1 commit corresponde a 1 *tarea*
* Hacer pública la rama `feature`
* Trabajar en equipo con la rama pública
* Petición de code review (*pull request*)
* Deploy en `master` cuando se acepte el código como válido finalmente

Crear rama `feature` y publicarla en remoto
: ~~~sh
    $ git checkout -b feature master
    $ git push -u origin feature
~~~

Comitear (opcionalmente, editar el historial de commits de la rama con `rebase -i`)
: ~~~sh
    $ git add .; git commit -m 'primer commit'; # ...
    # podemos hacer rebase -i hasta la base de la rama
    $ git rebase -i `git merge-base feature master`
~~~

> ***Únicamente se debe hacer `rebase -i` de commits que no hayan sido publicados.*** 

*Pull request* (petición de code review antes de integrar la rama en `master`)
: ~~~sh
    $ git checkout feature
    $ git push origin feature
    # se puede crear hook que envíe mail con el nombre del feature a validar
~~~

Code review: ver cambios introducidos en la rama `feature` respecto a `master`
: ~~~sh
    $ git checkout feature
    $ git difftool `git merge-base feature master`
~~~

Deploy de la rama `feature` a `master` (*merge commit* forzado para no perder la trazabilidad de la rama)
: ~~~sh
    $ git checkout master
    $ git pull
    # el parámetro --no-ff fuerza a que se cree un merge commit en master
    $ git merge --no-ff feature
    $ git branch -d feature
    $ git push
~~~

> Es posible forzar que ningún merge haga `fast-forward` (evitando tener que pasar el parámetro --no-ff) mediante la siguiente configuración: `git config --global --bool merge.ff false`

> En ese caso para forzar un merge con `fast-forward` se puede usar `git merge` con el parámetro `--ff-only`

### Propagación de cambios entre ramas

Propagar último commit de una rama a otra
: ~~~sh
    # después de hacer commit en master (por ejemplo)
    $ git checkout feature
    $ git cherry-pick master
~~~

Propagar commit mediante hash de una rama a otra
: ~~~sh
    $ git checkout feature
    $ git cherry-pick <hash_commit>
~~~

Propagar cambios de `master` a `feature` (rebase)
: ~~~sh
    # primero actualizamos la rama master
    $ git checkout master
    $ git pull
    # propagamos los cambios a feature
    $ git checkout feature
    $ git rebase master
    # opcional: podemos elegir que cambios de master queremos en nuestra rama 
    $ git rebase -i
~~~

Obtener directamente cambios desde origin/master (remoto)
: ~~~sh
    $ git checkout feature
    $ git pull origin master
~~~

Reintegrar en `master` los cambios de una rama (ver advertencia abajo)
: ~~~sh
    # obtenemos en feature los cambios de master
    $ git checkout feature
    $ git rebase master
    # obtenemos en master todos los cambios de feature
    $ git checkout master
    $ git merge --ff-only feature # fast-forward merge
    $ git branch -d feature
~~~

> ***Al realizar el merge `fast-forward` se pierde la trazabilidad de la rama que se ha integrado: `master` absorbe todos los commits que pertenecían a la rama y no se añade ningún merge commit que indique fusión de ramas*** 


